---
name: CI Earthly
on: ["push", "pull_request"]
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled,synchronize,reopened,unlabeled]
env:
  IMAGE_NAME: foo-app
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_OWNER: ${{ github.repository_owner }}
  AWS_ROLE_TO_ASSUME: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
  AWS_REGION: ap-northeast-1
  FORCE_COLOR: 1
jobs:
  build:
    name: Build image and push
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    permissions:
      # Needed to interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Needed to upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read

    steps:
      # - name: Dump event
      #   run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/marketplace/actions/setup-earthly
      - uses: earthly/actions-setup@v1

      - name: Earthly version
        run: earthly --version

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Display AWS identity
      #   run: aws sts get-caller-identity

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Put back the git branch into git (Earthly uses it for tagging)
        id: branch
        run: |
          branch=""
          if [ -n "$GITHUB_HEAD_REF" ]; then
            branch="$GITHUB_HEAD_REF"
          else
            branch="${GITHUB_REF##*/}"
          fi
          git checkout -b "$branch" || true
          echo "::set-output name=branch::${branch}"

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Dump environment
        run: env|sort

      - name: Build with Earthly
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          REGISTRY_NAME: ${{ steps.login-ecr.outputs.registry }}
        # run: earthly --ci --push +build
        # run: earthly -P -V +all
        # run: earthly -P -V --build-arg REGISTRY --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY --strict +deploy
        run: earthly -P -V --build-arg REGISTRY -strict +deploy
        # run: earthly -P -V --build-arg REGISTRY --strict --push +all
        # run: earthly -P -V --build-arg REGISTRY --remote-cache="${REGISTRY}/${IMAGE_NAME}:cache" --ci --push +all
        # run: earthly -P -V +all-platforms
        # run: earthly -P -V --platform=linux/arm64 +deploy
        # run: earthly -P -V --platform=linux/arm64 +deploy-scan

      - name: Publish unit test results to GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        # Run even if tests fail
        if: always()
        with:
          # Exported from build to local filesystem
          junit_files: junit-reports/*.xml
