---
name: CI ghcr.io
on: push
# on:
#   push:
#     branches: [main]
#     paths-ignore:
#       - 'README.md'
#       - '.github/**'
#       - '.vscode'
#       - '.gitignore'
#   pull_request:
#     # branches: [main]
#     types: [opened,synchronize,reopened,labeled,unlabeled]
env:
  IMAGE_NAME: foo-app
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_TAG: ${{ github.sha }}
  # Registry for dev and test images
  REGISTRY: ghcr.io/
  # Registry for public images, default is docker.io
  PUBLIC_REGISTRY: ""
  # Used by aws-actions/configure-aws-credentials to give GitHub Actions access
  # to AWS, potentially more secure than using secrets for AWS keys.
  AWS_ROLE_TO_ASSUME: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
  AWS_REGION: ap-northeast-1
  # Docker vars
  DOCKER_BUILDKIT: '1'
  COMPOSE_DOCKER_CLI_BUILD: '1'
  COMPOSE_FILE: docker-compose.gha.yml
  DOCKER_FILE: deploy/debian.Dockerfile
jobs:
  build-test:
    # Build image used to run tests
    name: Build test image
    runs-on: ubuntu-latest
    permissions:
      # Push to ghcr.io repository
      packages: write
      # Cancel previous runs
      actions: write
    steps:
      - name: Dump event
        run: cat "$GITHUB_EVENT_PATH"

      - name: Cancel previous runs in progress
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for main
        if: github.event_name != 'pull_request'
        run: echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get branch name for pull_request
        if: github.event_name == 'pull_request'
        run: echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # https://github.com/marketplace/actions/docker-login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Pull public images without rate limits
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Configure machine key or deploy keys to access private repos from build
      # https://github.com/marketplace/actions/webfactory-ssh-agent
      # https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys
      # ssh-keygen -t ed25519 -m pem -C "git@github.com:reachfh/api-utils.git" -f api-utils
      # - name: Configure ssh keys
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: |
      #       ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # https://github.com/docker/build-push-action
      - name: Build test image and push to GHCR
        uses: docker/build-push-action@v3
        with:
          file: ${{ env.DOCKER_FILE }}
          target: test-image
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # https://github.com/moby/buildkit#export-cache
          cache-from: type=gha,scope=${{ github.workflow }}-test
          cache-to: type=gha,scope=${{ github.workflow }}-test,mode=max
          # ssh: default
          tags: |
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:test${{ github.sha }}
          # secrets: |
          #   "access_token=${{ secrets.DEVOPS_ACCESS_TOKEN }}"
          #   "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
          #   "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"

  test:
    name: Run tests
    runs-on: ubuntu-latest
    # permissions: write-all
    permissions:
      # Read from ghcr.io repository
      packages: read

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read
    needs: [build-test]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Pull repos
        run: echo "postgres test" | xargs -n 1 -P 8 docker compose pull

      # TODO: Starting services in parallel fails with error
      # "Error response from daemon: network api_default is ambiguous (2 matches found on name)"
      # - name: Start required services
      #   run: echo "postgres redis" | xargs -n 1 -P 8 docker compose up --wait --detach

      - name: Start postgres
        run: docker compose up --wait --detach postgres

      # - name: Start redis
      #   run: docker compose up --wait --detach redis

      # - name: Start datadog
      #   env:
      #     DD_API_KEY: ${{ secrets.ACTIONS_DD_API_KEY }}
      #     DD_ENV: ci
      #     DD_HOSTNAME: "none"
      #     DD_INSIDE_CI: "true"
      #   run: docker compose up --detach datadog

      - name: Initialize test database
        run: docker compose run test mix do ecto.create, ecto.migrate

      - name: Run tests
        run: docker compose run test mix test --cover

      - name: Run quality checks
        run: docker compose run test mix do format --check-formatted, deps.unlock --check-unused, credo, hex.audit, deps.audit, sobelow

      - name: Publish unit test results to GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        # Run even if tests fail
        if: always()
        with:
          # Volume mounted from local filesystem into build
          junit_files: junit-reports/*.xml

      # - name: Upload test results to Datadog
      #   if: always()
      #   continue-on-error: true
      #   env:
      #     DD_API_KEY: ${{ secrets.ACTIONS_DD_API_KEY }}
      #     DD_ENV: ci
      #   run: |
      #     npm install -g @datadog/datadog-ci
      #     datadog-ci junit upload --service api-graphql junit-reports/*.xml

  test-dialyzer:
    name: Run dialyzer
    runs-on: ubuntu-latest
    needs: [build-test]
    permissions:
      # Read from ghcr.io repository
      packages: read

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Pull test
        run: docker compose pull --quiet test

      - name: Run dialyzer
        run: docker compose run test mix dialyzer --no-check --format github

  test-scan:
    name: Security scan code
    runs-on: ubuntu-latest
    needs: [build-test]
    permissions:
      # Read from ghcr.io repository
      packages: read

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read

      # Upload SARIF report files
      security-events: write
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Pull test
        run: docker compose pull --quiet test

      - name: Scan code with trivy
        run: |
          mkdir -p ./.cache
          mkdir -p ./sarif-reports
          docker compose run test trivy fs --no-progress --debug --cache-dir /var/cache .
          # docker compose run test trivy fs --format sarif -o /sarif-reports/trivy-code.sarif --no-progress --debug --cache-dir /var/cache .

      # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Scan code with trivy action
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: trivy.yaml

      # Requires GitHub Advanced Security
      # https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      # - name: Upload scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: './sarif-reports/'
      #     category: trivy

      # https://github.com/marketplace/actions/anchore-container-scan
      - name: Scan code with grype
        uses: anchore/scan-action@v3
        id: scan-grype
        with:
          path: .
          output-format: table
          fail-build: false
          # severity-cutoff: critical

      # - name: Upload grype scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: ${{ steps.scan-grype.outputs.sarif }}
      #     category: grype

  build-prod:
    name: Build prod image
    runs-on: ubuntu-latest
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Push to ghcr.io repository
      packages: write

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set vars
        run: echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> $GITHUB_ENV

      # - name: Log in to ECR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.ECR_REGISTRY }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for push
        if: github.event_name != 'pull_request'
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get branch name for pull_request
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # - name: Configure ssh keys
      #   uses: webfactory/ssh-agent@v0.7.0
      #   # https://github.com/marketplace/actions/webfactory-ssh-agent
      #   # https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys
      #   # ssh-keygen -t ed25519 -m pem -C "git@github.com:reachfh/api-utils.git" -f api-utils
      #   with:
      #     ssh-private-key: |
      #       ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Build deploy image and push to GHCR
        uses: docker/build-push-action@v3
        with:
          file: ${{ env.DOCKER_FILE }}
          target: deploy
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # ssh: default
          tags: |
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH }}-${{ env.GITHUB_SHA_SHORT }}
          # secrets: |
          #   "access_token=${{ secrets.DEVOPS_ACCESS_TOKEN }}"
          #   "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
          #   "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"

      - name: Build deploy image and push to AWS ECR
        uses: docker/build-push-action@v3
        env:
          REGISTRY: "${{ env.ECR_REGISTRY }}/"
        with:
          file: ${{ env.DOCKER_FILE }}
          target: deploy
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # ssh: default
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH }}-${{ env.GITHUB_SHA_SHORT }}
          # secrets: |
          #   "access_token=${{ secrets.DEVOPS_ACCESS_TOKEN }}"
          #   "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
          #   "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"

      # - name: Build scan image
      #   uses: docker/build-push-action@v3
      #   env:
      #     REGISTRY: ghcr.io/
      #   with:
      #     file: Dockerfile
      #     target: deploy-scan
      #     context: .
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     # https://github.com/moby/buildkit#export-cache
      #     cache-from: type=gha,scope=${{ github.workflow }}-scan
      #     cache-to: type=gha,scope=${{ github.workflow }}-scan,mode=max
      #     # ssh: default
      #     tags: |
      #       ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:scan${{ github.sha }}
      #     # secrets: |
      #     #   "access_token=${{ secrets.DEVOPS_ACCESS_TOKEN }}"
      #     #   "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
      #     #   "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"

  scan:
    name: Security scan prod image
    runs-on: ubuntu-latest
    needs: [build-prod]
    # permissions: write-all
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Read from ghcr.io repository
      packages: read

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read

      # Upload SARIF report files
      security-events: write
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Pull repos
        run: echo "trivy deploy" | xargs -n 1 -P 8 docker compose pull

      - name: Scan image with trivy
        run: |
          mkdir -p ./.cache
          mkdir -p ./sarif-reports
          docker compose run trivy image ghcr.io/${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:${{github.sha}}

      - name: Scan image with trivy action
        uses: aquasecurity/trivy-action@master
        # https://github.com/aquasecurity/trivy-action
        # https://github.com/marketplace/actions/aqua-security-trivy#inputs
        with:
          image-ref: ghcr.io/${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:${{github.sha}}
          format: 'sarif'
          # exit-code: '1'
          # ignore-unfixed: true
          # vuln-type: 'os,library'
          # severity: 'CRITICAL,HIGH'
          cache-dir: ./.cache
          output: './sarif-reports/trivy.sarif'

      # Requires GitHub Advanced Security
      # https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: './sarif-reports/'
      #     category: trivy

      # https://github.com/marketplace/actions/anchore-container-scan
      - name: Scan image with grype action
        uses: anchore/scan-action@v3
        id: scan-grype
        with:
          image: ghcr.io/${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:${{github.sha}}
          # severity-cutoff: critical
          fail-build: false
          output-format: table

      # - name: Upload grype scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: ${{ steps.scan-grype.outputs.sarif }}
      #     category: grype

  deploy:
    name: Deploy final images
    if: github.event_name != 'pull_request'
    # if: contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [build-prod, test]
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Push to ghcr.io repository
      packages: write

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set vars
        run: echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> $GITHUB_ENV

      # - name: Log in to ECR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.ECR_REGISTRY }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag GHCR release as latest
        if: github.event_name != 'pull_request'
        run: docker buildx imagetools create --append ghcr.io/${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:${{github.sha}} --tag ghcr.io/${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:latest

      - name: Check out source
        uses: actions/checkout@v3

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # ECR does not support tagging without building
      - name: Build final deploy image and push to AWS ECR as latest
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v3
        env:
          REGISTRY: "${{ env.ECR_REGISTRY }}/"
        with:
          file: ${{ env.DOCKER_FILE }}
          target: deploy
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # ssh: default
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # secrets: |
          #   "access_token=${{ secrets.DEVOPS_ACCESS_TOKEN }}"
          #   "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
          #   "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"

  # container-test:
  #   runs-on: ubuntu-latest
  #   needs: [build-test]
  #   permissions: write-all
  #   container:
  #     image: ghcr.io/cogini/foo-app:test
  #     volumes:
  #       - /junit-reports:/junit-reports
  #     credentials:
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Run pwd
  #       run: pwd
  #     - name: Run ls
  #       run: ls
  #     - name: Run mix test
  #       run: mix do format --check-formatted, credo, deps.audit, sobelow

  # https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container
  # container-test-job:
  #   runs-on: ubuntu-latest
  #   needs: [build-scan]
  #   container:
  #     image: ghcr.io/${{ github.repository_owner }}/foo-app:scan
  #     volumes:
  #       - /sarif-reports:/sarif-reports
  #   steps:
  #     - name: Trivy scan fs
  #       run: trivy fs --no-progress /
