---
on: push
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled, synchronize, reopened, unlabeled]
name: CI ghcr.io
env:
  IMAGE_OWNER: ${{ github.repository_owner }}
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: foo-app
  AWS_ROLE_TO_ASSUME: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
  AWS_REGION: ap-northeast-1
  DOCKER_BUILDKIT: '1'
  COMPOSE_DOCKER_CLI_BUILD: '1'
jobs:
  build-test:
    name: Build test image
    runs-on: ubuntu-latest
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read
      # Push to ghcr.io repository
      packages: write
    # permissions:
    #   actions: read|write|none
    #   checks: read|write|none
    #   contents: read|write|none
    #   deployments: read|write|none
    #   id-token: read|write|none
    #   issues: read|write|none
    #   discussions: read|write|none
    #   packages: read|write|none
    #   pages: read|write|none
    #   pull-requests: read|write|none
    #   repository-projects: read|write|none
    #   security-events: read|write|none
    #   statuses: read|write|none
    steps:
      # - name: Dump event
      #   run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Display AWS identity
      #   run: aws sts get-caller-identity

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for push
        if: github.event_name != 'pull_request'
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get pull_request branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # https://github.com/docker/build-push-action
      - name: Build test image
        id: docker-build-test
        uses: docker/build-push-action@v3
        env:
          REGISTRY: ghcr.io/
          PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          target: test-image
          # https://github.com/moby/buildkit#export-cache
          cache-from: type=gha,scope=${{ github.workflow }}-test
          cache-to: type=gha,scope=${{ github.workflow }}-test,mode=max
          tags: |
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:test

  test:
    name: Run tests
    runs-on: ubuntu-latest
    permissions: write-all
    # permissions:
    #   # Interact with GitHub's OIDC Token endpoint for AWS
    #   id-token: write
    #   contents: read
    #   # Read from ghcr.io repository
    #   packages: read
    #
    #   # Upload JUnit report files
    #   # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
    #   checks: write
    #   pull-requests: write
    #   issues: read
    needs: [build-test]
    steps:
      # https://github.com/marketplace/actions/docker-login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Run tests
        env:
          REGISTRY: ghcr.io/
          # PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          PUBLIC_REGISTRY: ""
        run: |
          docker pull "${REGISTRY}${IMAGE_OWNER}/${IMAGE_NAME}:test"
          docker-compose -f docker-compose.gha.yml up test
          docker-compose -f docker-compose.gha.yml run test mix test
          docker-compose -f docker-compose.gha.yml run test mix do format --check-formatted, credo, deps.audit, sobelow

      - name: Publish unit test results to GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        # Run even if tests fail
        if: always()
        with:
          # Volume mounted from local filesystem into build
          junit_files: junit-reports/*.xml

  test-dialyzer:
    name: Run dialyzer
    runs-on: ubuntu-latest
    needs: [build-test]
    permissions: write-all
    # permissions:
    #   # Interact with GitHub's OIDC Token endpoint for AWS
    #   id-token: write
    #   contents: read
    #   # Read from ghcr.io repository
    #   packages: read
    #
    #   # Upload JUnit report files
    #   # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
    #   checks: write
    #   pull-requests: write
    #   issues: read
    steps:
      # https://github.com/marketplace/actions/docker-login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Run tests
        env:
          REGISTRY: ghcr.io/
          # PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          PUBLIC_REGISTRY: ""
        run: |
          docker pull "${REGISTRY}${IMAGE_OWNER}/${IMAGE_NAME}:test"
          docker-compose -f docker-compose.gha.yml up test
          docker-compose -f docker-compose.gha.yml run test mix dialyzer --no-check --halt-exit-status --format github

  build-prod:
    name: Build prod image and push
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Push to ghcr.io repository
      packages: write

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read
    steps:
      # - name: Dump event
      #   run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Display AWS identity
      #   run: aws sts get-caller-identity

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://github.com/marketplace/actions/docker-login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for push
        if: github.event_name != 'pull_request'
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get pull_request branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Build deploy image and push
        if: github.event_name != 'pull_request'
        id: docker-push
        uses: docker/build-push-action@v3
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:latest

  build-scan:
    name: Build prod image with security scanning tools
    runs-on: ubuntu-latest
    needs: [build-prod, build-test]
    permissions:
      # Interact with GitHub's OIDC Token endpoint for AWS
      id-token: write
      contents: read
      # Push to ghcr.io repository
      packages: write
    # needs: [build-prod, build-test]
    steps:
      # - name: Dump event
      #   run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Display AWS identity
      #   run: aws sts get-caller-identity

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for push
        if: github.event_name != 'pull_request'
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get pull_request branch name
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # https://github.com/docker/build-push-action
      - name: Build deploy-scan image
        id: docker-build-scan
        uses: docker/build-push-action@v3
        env:
          REGISTRY: ghcr.io/
          PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          # load: true
          push: true
          target: deploy-scan
          # https://github.com/moby/buildkit#export-cache
          cache-from: type=gha,scope=${{ github.workflow }}-scan
          cache-to: type=gha,scope=${{ github.workflow }}-scan,mode=max
          tags: |
            ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:scan

  scan:
    name: Run security scans
    runs-on: ubuntu-latest
    needs: [build-scan, build-test]
    # permissions: write-all
    # permissions:
    #   # Interact with GitHub's OIDC Token endpoint for AWS
    #   id-token: write
    #   contents: read
    #   # Read from ghcr.io repository
    #   packages: read
    #
    #   # Upload JUnit report files
    #   # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
    #   checks: write
    #   pull-requests: write
    #   issues: read
    #
    #   # Upload SARIF report files
    #   security-events: read

    steps:
      # https://github.com/marketplace/actions/docker-login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Security scan code
        env:
          REGISTRY: ghcr.io/
          # PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          PUBLIC_REGISTRY: ""
        run: |
          mkdir -p ./sarif-reports
          docker pull "${REGISTRY}${IMAGE_OWNER}/${IMAGE_NAME}:test"
          docker-compose -f docker-compose.gha.yml up test
          docker-compose -f docker-compose.gha.yml run test trivy fs --no-progress .
          docker-compose -f docker-compose.gha.yml run test trivy fs --format sarif -o /sarif-reports/trivy-code.sarif --no-progress .

      - name: Security scan image
        env:
          REGISTRY: ghcr.io/
          # PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          PUBLIC_REGISTRY: ""
        run: |
          mkdir -p ./sarif-reports
          docker pull "${REGISTRY}${IMAGE_OWNER}/${IMAGE_NAME}:scan"
          docker-compose -f docker-compose.gha.yml run scan trivy fs --no-progress /
          docker-compose -f docker-compose.gha.yml run scan trivy fs --format sarif -o /sarif-reports/trivy-deploy.sarif --no-progress /
          # docker-compose -f docker-compose.gha.yml run scan trivy fs --severity CRITICAL --exit-code 1 --format sarif -o /sarif-reports/trivy.sarif --no-progress /

      # https://github.com/aquasecurity/trivy-action
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:scan
      #     # image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:scan
      #     format: 'sarif'
      #     exit-code: '1'
      #     # ignore-unfixed: true
      #     # vuln-type: 'os,library'
      #     # severity: 'CRITICAL,HIGH'
      #     output: './sarif-reports/trivy.sarif'

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: './sarif-reports/'
          category: trivy

  # https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container
  container-test-job:
    runs-on: ubuntu-latest
    needs: [build-scan]
    container:
      image: ghcr.io/${{ github.repository_owner }}/foo-app:scan
      volumes:
        - /sarif-reports:/sarif-reports
    steps:
      - name: Trivy scan fs
        run: trivy fs --no-progress /

  trivy-job:
    runs-on: ubuntu-latest
    needs: [build-prod]
    permissions: write-all
    container:
      image: aquasec/trivy
      volumes:
        - /sarif-reports:/sarif-reports
        - /trivy-cache:/trivy-cache
      # credentials:
      #   username: ${{ github.actor }}
      #   password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Trivy scan image
        run: trivy image ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:latest --debug --cache-dir /trivy-cache
        # run: trivy image ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:latest --debug --cache-dir /trivy-cache
        # run: trivy image ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format sarif -o /sarif-reports/trivy-image.sarif /

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      # - name: Upload scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: '/sarif-reports/'
      #     category: trivy
