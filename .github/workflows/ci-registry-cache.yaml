---
name: CI registry caching
on: push
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled,synchronize,reopened,unlabeled]
jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    # Needed to interact with GitHub's OIDC Token endpoint for AWS
    permissions:
      id-token: write
      contents: read
    env:
      # REGISTRY: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com/
      # REGISTRY_NAME: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com
      IMAGE_NAME: foo-app
      AWS_REGION: ap-northeast-1
    steps:
      - name: Dump Event
        run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Display AWS identity
        run: aws sts get-caller-identity

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2



      - name: Build Docker image and push
        id: docker
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=inline,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.run_id }}
