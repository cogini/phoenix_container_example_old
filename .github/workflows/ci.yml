---
name: CI
on: push
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled,synchronize,reopened,unlabeled]
jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    env:
      REGISTRY: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com/
      REGISTRY_NAME: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com
      FORCE_COLOR: 1
    steps:
      - name: Dump Event
        run: cat "$GITHUB_EVENT_PATH"

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set output variables
        id: vars
        run: |
          echo "SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "##[set-output name=runid;]${GITHUB_RUN_ID}"
          echo "##[set-output name=registry;]${REGISTRY}"
          echo "##[set-output name=run_num;]${GITHUB_RUN_NUMBER}"

      - name: Put back the git branch into git (Earthly uses it for tagging)
        run: |
          branch=""
          if [ -n "$GITHUB_HEAD_REF" ]; then
            branch="$GITHUB_HEAD_REF"
          else
            branch="${GITHUB_REF##*/}"
          fi
          git checkout -b "$branch" || true

      - name: Set up QEMU for multi-platform builds
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # https://github.com/marketplace/actions/docker-login
      - name: Login to Docker Hub
        id: login-docker-hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ steps.vars.outputs.registry }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker build and push
        if: github.event_name != 'pull_request'
        id: docker
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          tags: |
            ${{ steps.vars.outputs.registry }}/foo-app:latest
            ${{ steps.vars.outputs.registry }}/foo-app:${{ env.BRANCH }}-${{ env.SHA_SHORT }}
            ${{ steps.vars.outputs.registry }}/foo-app:${{ steps.vars.outputs.run_num }}

      - name: Docker build and push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ github.event.repository.name }}:${{ env.BRANCH }}-${{ env.SHA_SHORT }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

