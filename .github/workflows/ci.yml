---
name: CI
on: push
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled,synchronize,reopened,unlabeled]
jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    env:
      REGISTRY: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com/
      REGISTRY_NAME: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com
      APP_NAME: foo-app
    steps:
      - name: Dump Event
        run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
          aws-region: ap-northeast-1

      - name: Display AWS identity
        run: aws sts get-caller-identity

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set variables
        id: vars
        # env:
        #   REGISTRY: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com/
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=registry::${REGISTRY_NAME}"
          echo "::set-output name=runid::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Put back the git branch into git (Earthly uses it for tagging)
        id: branch
        run: |
          branch=""
          if [ -n "$GITHUB_HEAD_REF" ]; then
            branch="$GITHUB_HEAD_REF"
          else
            branch="${GITHUB_REF##*/}"
          fi
          git checkout -b "$branch" || true
          echo "##[set-output name=branch;]${branch}"

      - name: Set up QEMU for multi-platform builds
        id: qemu
        uses: docker/setup-qemu-action@v2
        # with:
        #   image: tonistiigi/binfmt:latest
        #   platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        # with:
        #   install: true

      # https://github.com/marketplace/actions/docker-login
      - name: Login to ECR
        id: login-ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Build Docker image and push
        if: github.event_name != 'pull_request'
        id: docker
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          # push: false
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.APP_NAME }}:latest
            ${{ steps.vars.outputs.registry }}/${{ env.APP_NAME }}:${{ github.sha }}
            ${{ steps.vars.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.vars.outputs.run_num }}
            ${{ steps.vars.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.branch.outputs.branch }}-${{ env.GITHUB_SHA_SHORT }}

      - name: Build Docker image and push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.APP_NAME }}:${{ github.sha }}
            ${{ steps.vars.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.branch.outputs.branch }}-${{ env.GITHUB_SHA_SHORT }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
