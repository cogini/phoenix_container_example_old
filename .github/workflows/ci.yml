---
name: CI
on: push
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [labeled,synchronize,reopened,unlabeled]
jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    env:
      REGISTRY: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com/
      REGISTRY_NAME: 770916339360.dkr.ecr.ap-northeast-1.amazonaws.com
      IMAGE_NAME: foo-app
    steps:
      - name: Dump Event
        run: cat "$GITHUB_EVENT_PATH"

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
          aws-region: ap-northeast-1

      - name: Display AWS identity
        run: aws sts get-caller-identity

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=registry::${REGISTRY_NAME}"
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/marketplace/actions/docker-login
      - name: Login to ECR
        id: login-ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker test image
        id: docker-build-test
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          # push: false
          load: true
          target: test-image
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
          tags: |
            ${{ env.IMAGE_NAME }}:test

      - name: Run tests
        # env:
        #   DATABASE_HOST: postgres
        run: |
          docker-compose up test
          docker-compose run test mix test
          docker-compose run test mix credo
          docker-compose run test mix deps.audit
          docker-compose run test mix sobelow

      - name: Build Docker deploy image and push
        if: github.event_name != 'pull_request'
        id: docker-push
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
          tags: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.run_id }}

      - name: Build Docker deploy image and push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/Dockerfile.debian
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
          tags: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
