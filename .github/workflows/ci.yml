---
name: CI
on: ["push", "pull_request"]
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#     types: [opened,synchronize,reopened,labeled,unlabeled]
env:
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: foo-app
  IMAGE_OWNER: ${{ github.repository_owner }}
  AWS_ROLE_TO_ASSUME: arn:aws:iam::770916339360:role/foo-dev-ecr-github-action-role
  AWS_REGION: ap-northeast-1
jobs:
  docker-build:
    name: Build image and push
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      # Interact with GitHub OIDC Token endpoint for AWS
      id-token: write
      contents: read

      # Upload JUnit report files
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
      issues: read

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      # https://github.com/aws-actions/configure-aws-credentials
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # https://github.com/marketplace/actions/docker-login

      # https://github.com/aws-actions/amazon-ecr-login
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_NAME }}
      #     username: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Pull public images without rate limits
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check out source
        uses: actions/checkout@v3

      - name: Set variables
        id: vars
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "::set-output name=run_id::${GITHUB_RUN_ID}"
          echo "::set-output name=run_num::${GITHUB_RUN_NUMBER}"

      - name: Get branch name for push
        if: github.event_name != 'pull_request'
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get branch name for pull_request
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=$(echo $GITHUB_HEAD_REF | tr '//\\' '.' | cut -c -55)" >> $GITHUB_ENV

      # # https://github.com/marketplace/actions/webfactory-ssh-agent
      # # https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys
      # # ssh-keygen -t ed25519 -m pem -C "git@github.com:reachfh/api-utils.git" -f api-utils
      # - name: Configure ssh keys
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: |
      #       ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Set up QEMU for multi-platform builds
      #   id: qemu
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64

      # - name: Display available platforms
      #   run: echo "${{ steps.qemu.outputs.platforms }}"

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # https://github.com/docker/build-push-action
      - name: Build test image
        uses: docker/build-push-action@v3
        env:
          REGISTRY_NAME: localhost:5000
          REGISTRY: localhost:5000/
          PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          target: test-image
          # https://github.com/moby/buildkit#export-cache
          cache-from: type=gha,scope=${{ github.workflow }}-test
          cache-to: type=gha,scope=${{ github.workflow }}-test,mode=max
          # ssh: default
          tags: |
            localhost:5000/${{ env.IMAGE_OWNER}}/${{ env.IMAGE_NAME }}:test

      - name: Start postgres
        env:
          REGISTRY: ghcr.io/
          PUBLIC_REGISTRY: ""
        run: |
          docker compose -f docker-compose.gha.yml up --wait --detach postgres

      - name: Run tests
        env:
          REGISTRY: localhost:5000/
          # PUBLIC_REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          PUBLIC_REGISTRY: ""
        run: |
          docker compose -f docker-compose.gha.yml run test mix test --cover

      - name: Run quality checks
        env:
          REGISTRY: localhost:5000/
          PUBLIC_REGISTRY: ""
        run: |
          docker compose -f docker-compose.gha.yml run test mix do format --check-formatted, deps.unlock --check-unused, credo, hex.audit, deps.audit, sobelow

      - name: Run dialyzer
        env:
          REGISTRY: localhost:5000/
          PUBLIC_REGISTRY: ""
        run: |
          docker compose -f docker-compose.gha.yml run test mix dialyzer --no-check --halt-exit-status --format github

      - name: Build deploy image and push
        if: github.event_name != 'pull_request'
        id: docker-push
        uses: docker/build-push-action@v3
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}/"
          REGISTRY_NAME: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # ssh: default
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Build deploy image and push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./deploy/debian.Dockerfile
          push: true
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Publish unit test results to GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        # Run even if tests fail
        if: always()
        with:
          # Volume mounted from local filesystem into build
          junit_files: junit-reports/*.xml
