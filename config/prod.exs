import Config

config :logger,
  level: :info,
  # metadata: :all,
  utc_log: true

# config :logger, :console,
#   format: "$metadata[$level] $message\n",
#   # metadata: [:file, :line, :request_id, :trace_id, :span_id]
#   metadata: :all

config :logger, :default_formatter,
  format: "$metadata[$level] $message\n",
  metadata: [:file, :line, :request_id, :trace_id, :span_id]

# config :logger,
#   handle_otp_reports: true,
#   handle_sasl_reports: true

# config :logger, :default_handler, false

config :phoenix_container_example, :logger, [
  {:handler, :default, :logger_std_h,
   %{
     formatter:
       {:logger_formatter_json, %{
          template: [
            :msg,
            :time,
            :level,
            :file,
            :line,
            :mfa,
            :pid,
            :trace_id,
            :span_id
          ]
       }}
   }}
]

# config :phoenix_container_example, :logger, [
#   {:handler, :default, :logger_std_h,
#    %{
#      formatter:
#        {:logger_formatter_json, %{
#           template: [
#             :msg,
#             :time,
#             :level,
#             :file,
#             :line,
#             :mfa,
#             :pid,
#             :trace_id,
#             :span_id
#           ]
#        }}
#    }}
# ]

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :phoenix_container_example, PhoenixContainerExampleWeb.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json"

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :phoenix_container_example, PhoenixContainerExampleWeb.Endpoint,
#       ...,
#       url: [host: "example.com", port: 443],
#       https: [
#         ...,
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :phoenix_container_example, PhoenixContainerExampleWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.
# import_config "prod.secret.exs"

# https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/
# config :opentelemetry, :resource,
#   [
#     # In production service.name is set based on OS env vars from Erlang release
#     {"service.name", to_string(Mix.Project.config[:app])},
#     # {"service.namespace", "MyNamespace"},
#     {"service.version", Mix.Project.config[:version]},
#   ]

# https://hexdocs.pm/opentelemetry_exporter/1.0.0/readme.html
# Maybe OTEL_EXPORTER_OTLP_ENDPOINT=http://opentelemetry-collector:55680
config :opentelemetry, :processors,
  otel_batch_processor: %{
    exporter: {
      :opentelemetry_exporter,
      %{
        protocol: :grpc,
        endpoints: [
          # gRPC
          'http://localhost:4317'
          # HTTP
          # 'http://localhost:4318'
          # 'http://localhost:55681'
          # {:http, 'localhost', 4318, []}
        ]
        # headers: [{"x-honeycomb-dataset", "experiments"}]
      }
    }
  }
