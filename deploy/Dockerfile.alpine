# syntax=docker/dockerfile:1.0-experimental
# syntax=docker/dockerfile:experimental
#
# Build an Elixir/Phoenix app.
#
# It takes advantage of caching and parallel build support in BuildKit.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

# ARG ELIXIR_VERSION=1.10-alpine
# ARG ELIXIR_VERSION=alpine
ARG ELIXIR_VERSION=1.11.2

ARG ERLANG_VERSION=23.1.2

ARG NODE_VERSION=14.4

ARG ALPINE_VERSION=3.12.1
# ARG ELIXIR_IMAGE_NAME=elixir
ARG ELIXIR_IMAGE_NAME=hexpm/elixir

# ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}
ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-alpine-${ALPINE_VERSION}

# Elixir release env to build
ARG MIX_ENV=prod

# Name of Elixir release
ARG RELEASE=app

# OS user that app runs under
ARG APP_USER=app

ARG APP_DIR=/app

# Docker registry for base images, default is docker.io
# If specified, should have a trailing slash
ARG REGISTRY=""


##########################################################################
# Fetch dependencies

FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS deps

ARG http_proxy
ARG https_proxy=$http_proxy

ARG MIX_ENV

WORKDIR /app

COPY config ./config
COPY mix.exs .
COPY mix.lock .

# Mount hex and rebar cache directories as type=cache
RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force, deps.get --only $MIX_ENV

FROM deps AS test

ARG MIX_ENV

WORKDIR /app

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY priv ./priv
COPY test ./test

RUN mix do compile

##########################################################################
# Build Phoenix assets
# Using stretch because it has Python

FROM ${REGISTRY}node:${NODE_VERSION}-stretch AS assets
WORKDIR /app/assets

# Copy deps to get assets from phoenix
COPY --from=deps /app/deps /app/deps/

COPY assets/package.json assets/package-lock.json ./

# Cache npm cache directory as type=cache
RUN --mount=type=cache,target=~/.npm,sharing=locked \
    npm --prefer-offline --no-audit --progress=false \
    --loglevel=error ci

COPY assets .

RUN npm run deploy


##########################################################################
# Create Phoenix digest

FROM deps AS digest

ARG MIX_ENV
ARG RELEASE

COPY --from=assets /app/priv ./priv
# https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html
RUN mix phx.digest

# This does a partial compile.
# Doing "mix do compile, phx.digest, release" in a single stage is worse,
# because a single line of code changed causes a complete recompile.
# With the stages separated most of the compilation is cached.


##########################################################################
# Create release

FROM digest AS release

ARG MIX_ENV
ARG RELEASE

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY rel ./rel

RUN mix do compile, release $RELEASE


##########################################################################
# Create actual image that is deployed

FROM ${REGISTRY}alpine:${ALPINE_VERSION} AS deploy

ARG MIX_ENV
ARG RELEASE

ARG APP_USER
ARG APP_GROUP=$APP_USER
ARG APP_DIR

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=C.UTF-8 \
    HOME=$APP_DIR \
    RELEASE_TMP=/run/app \
    RELEASE=${RELEASE} \
    PORT=4000

# Install Alpine libraries needed to compile the project.
# See https://wiki.alpinelinux.org/wiki/Local_APK_cache for details
# on the local cache and need for the symlink

RUN --mount=type=cache,id=apk,target=/var/cache/apk,sharing=locked \
    ln -s /var/cache/apk /etc/apk/cache \
    && apk update \
    # Install openssl, allowing the app to listen on HTTPS.
    # May not be needed if handled outside the application (e.g. in Kubernetes ingress).
    && apk add openssl ncurses-libs

# Create user and group to run under with specific uid
RUN addgroup -g 1000 -S $APP_GROUP \
    && adduser -u 1000 -S $APP_USER -G $APP_GROUP

# Create dirs writable by app user
RUN mkdir -p \
        /run/app \
    && chown -R $APP_USER:$APP_GROUP \
        /run/app

USER $APP_USER

# Setting WORKDIR after USER makes directory be owned by the user.
# Setting it before makes it owned by root, which is more secure.
# The app needs to be able to write to a tmp directory on startup, which by
# default is under the release. This can be changed by setting RELEASE_TMP to
# /tmp or, more securely, /run/foo
WORKDIR $APP_DIR

USER $APP_USER

# Chown files while copying. Running "RUN chown -R app:app /app"
# adds an extra layer which is about 10Mb, a huge difference when the
# image for a new phoenix app is around 20Mb.

# TODO: For more security, change specific files to have group read/execute
# permissions while leaving them owned by root

COPY --from=release --chown=$APP_USER:$APP_GROUP /app/_build/$MIX_ENV/rel/${RELEASE} ./

EXPOSE $PORT

# "app" here is the name of the release
ENTRYPOINT ["bin/app"]
# TODO: configure using $RELEASE

# Run app in foreground
CMD ["start"]


##########################################################################
# Copy build artifacts to host

FROM scratch as artifacts

ARG MIX_ENV
ARG RELEASE

COPY --from=release /app/_build/$MIX_ENV/rel/${RELEASE} /release
COPY --from=release /app/priv/static /static

##########################################################################
# Default target
FROM deploy
