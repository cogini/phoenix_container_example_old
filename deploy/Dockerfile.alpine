# syntax=docker/dockerfile:experimental
#
# Build app
#
# It takes advantage of caching and parallel build support in BuildKit.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

ARG ELIXIR_VERSION=1.11.2
ARG ERLANG_VERSION=23.2.4
ARG NODE_VERSION=14.4

ARG ALPINE_VERSION=3.13.1

# Run "apk upgrade" to update packages to a newer version than what is in the base image.
# This ensures that we get the latest packages, but makes the build nondeterministic.
# It is most useful when here is a vulnerability which is fixed in packages but
# not yet released in an Alpine base image.
# ARG APK_UPGRADE="apk upgrade --update-cache -a"
ARG APK_UPGRADE=":"

# Base image for deploy
ARG BASE_IMAGE_NAME=alpine
ARG BASE_IMAGE_TAG=$ALPINE_VERSION

# ARG ELIXIR_IMAGE_NAME=elixir
ARG ELIXIR_IMAGE_NAME=hexpm/elixir

# ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}
ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-alpine-${ALPINE_VERSION}

# Elixir release env to build
ARG MIX_ENV=prod

# Name of Elixir release
# This should match mix.exs, e.g.
# defp releases do
#   [
#     prod: [
#       include_executables_for: [:unix],
#     ],
#   ]
# end
ARG RELEASE=prod

# Name of app, e.g. for directories
ARG APP_NAME=app

# OS user that app runs under
ARG APP_USER=app

# Runtime dir
ARG APP_DIR=/app

ARG LANG=C.UTF-8

# Docker registry for base images, default is docker.io
# If specified, should have a trailing slash
ARG REGISTRY=""

##########################################################################
# Fetch OS build dependencies, e.g. libraries

FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS os-deps

ARG APK_UPGRADE

ARG http_proxy
ARG https_proxy=$http_proxy

ARG LANG

RUN --mount=type=cache,id=apk,target=/var/cache/apk,sharing=locked \
    ln -s /var/cache/apk /etc/apk/cache \
    && apk update \
    && $APK_UPGRADE \
    && apk add alpine-sdk \
    && apk add curl \
    && apk add nodejs npm \
    && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin


##########################################################################
# Fetch app library dependencies

FROM os-deps AS deps

ARG http_proxy
ARG https_proxy=$http_proxy

ARG LANG
ARG MIX_ENV

WORKDIR /app

# Get Elixir app deps
COPY config ./config
COPY mix.exs .
COPY mix.lock .

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force, deps.get
    # mix do local.rebar --force, local.hex --force, deps.get --only $MIX_ENV

##########################################################################
# Run tests

FROM deps AS test

ARG LANG
ARG MIX_ENV

WORKDIR /app

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY priv ./priv
COPY test ./test
COPY bin ./bin

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do compile

##########################################################################
# Build Phoenix assets
# Using Debian because it has Python

# FROM ${REGISTRY}node:${NODE_VERSION}-buster AS assets
FROM deps AS assets

ARG LANG

WORKDIR /app/assets

# Copy deps to get assets from phoenix
COPY --from=deps /app/deps /app/deps/

COPY assets/package.json assets/package-lock.json ./

# Cache npm cache directory as type=cache
RUN --mount=type=cache,target=~/.npm,sharing=locked \
    npm --prefer-offline --no-audit --progress=false \
    --loglevel=error ci

COPY assets .

RUN npm run deploy

##########################################################################
# Create Phoenix digest

FROM deps AS digest

ARG LANG
ARG MIX_ENV

COPY --from=assets /app/priv ./priv

# https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html
RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix phx.digest

# This does a partial compile.
# Doing "mix do compile, phx.digest, release" in a single stage is worse,
# because a single line of code changed causes a complete recompile.
# With the stages separated most of the compilation is cached.

##########################################################################
# Create release

FROM digest AS release

ARG MIX_ENV
ARG LANG
ARG RELEASE

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY rel ./rel

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do compile, release "$RELEASE"


##########################################################################
# Create final image that is deployed

FROM ${REGISTRY}${BASE_IMAGE_NAME}:${BASE_IMAGE_TAG} AS deploy

ARG APK_UPGRADE

ARG LANG
ARG APP_NAME
ARG APP_USER
ARG APP_GROUP="$APP_USER"
ARG APP_DIR

ARG MIX_ENV
ARG RELEASE

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=$LANG \
    HOME=$APP_DIR \
    RELEASE_TMP="/run/$APP_NAME" \
    RELEASE=${RELEASE} \
    PORT=4000

# Install Alpine libraries needed at runtime
# See https://wiki.alpinelinux.org/wiki/Local_APK_cache for details
# on the local cache and need for the symlink
RUN --mount=type=cache,id=apk,target=/var/cache/apk,sharing=locked \
    ln -s /var/cache/apk /etc/apk/cache \
    && apk update \
    # Upgrading ensures that we get the latest packages, but makes the build nondeterministic
    && $APK_UPGRADE \
    # https://github.com/krallin/tini
    # && apk add tini \
    # Make DNS resolution more reliable
    # https://github.com/sourcegraph/godockerize/commit/5cf4e6d81720f2551e6a7b2b18c63d1460bbbe4e
    # && apk add bind-tools \
    # Install openssl, allowing the app to listen on HTTPS.
    # May not be needed if HTTPS is handled outside the application, e.g. in load balancer.
    && apk add openssl ncurses-libs

# Create user and group to run under with specific uid
RUN addgroup -g 10001 -S "$APP_GROUP" \
    && adduser -u 10000 -S "$APP_USER" -G "$APP_GROUP" -h "$HOME"

# Create app dirs
RUN mkdir -p \
        "/run/$APP_NAME" \
    # Make dirs writable by app
    && chown -R "$APP_USER:$APP_GROUP" \
        # Needed for RELEASE_TMP
        "/run/$APP_NAME"

# USER $APP_USER

# Setting WORKDIR after USER makes directory be owned by the user.
# Setting it before makes it owned by root, which is more secure.
# The app needs to be able to write to a tmp directory on startup, which by
# default is under the release. This can be changed by setting RELEASE_TMP to
# /tmp or, more securely, /run/foo
WORKDIR $APP_DIR

USER $APP_USER

# Chown files while copying. Running "RUN chown -R app:app /app"
# adds an extra layer which is about 10Mb, a huge difference when the
# image for a new phoenix app is around 20Mb.

# TODO: For more security, change specific files to have group read/execute
# permissions while leaving them owned by root

COPY --from=release --chown="$APP_USER:$APP_GROUP" "/app/_build/$MIX_ENV/rel/${RELEASE}" ./

EXPOSE $PORT

# "bin" is the directory under the unpacked release, and "prod" is the name of the release
ENTRYPOINT ["bin/prod"]
# ENTRYPOINT ["/sbin/tini", "--", "bin/prod"]

# Run app in foreground
CMD ["start"]

##########################################################################
# Scan for security vulnerabilities

FROM deploy as vuln

USER root

RUN --mount=type=cache,id=apk,target=/var/cache/apk,sharing=locked \
    apk add curl \
    && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

RUN --mount=type=cache,id=apk,target=/var/cache/apk,sharing=locked \
    --mount=type=cache,target=/root/.cache/trivy,sharing=locked \
    # Succeed for issues of severity = HIGH
    trivy filesystem --exit-code 0 --severity HIGH --no-progress / \
    # Fail build if there are any issues of severity = CRITICAL
    && trivy filesystem --exit-code 1 --severity CRITICAL --no-progress /
    # Fail build if there are any issues
    # && trivy filesystem -d --exit-code 1 --no-progress /

    # && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    # && grype -vv --fail-on medium dir:/ \

##########################################################################
# Copy build artifacts to host

FROM scratch as artifacts

ARG MIX_ENV
ARG RELEASE

COPY --from=release /app/_build/$MIX_ENV/rel/${RELEASE} /release
COPY --from=release /app/priv/static /static

##########################################################################
# Default target
FROM deploy
