# syntax=docker/dockerfile:experimental
#
# Create custom build image for CodeBuild with latest Docker
# so we can use BuildKit
#
# It takes advantage of caching and parallel build support in BuildKit.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

# Docker repository, default is docker.io
ARG DOCKER_REPO=""

ARG UBUNTU_VERSION=focal
# ARG UBUNTU_VERSION=bionic
ARG UBUNTU_CODENAME=focal

ARG DEBIAN_FRONTEND=noninteractive
ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"

FROM ${DOCKER_REPO}ubuntu:${UBUNTU_VERSION}

# Remove special Docker caching config in apt, as it is not helpful with BuildKit caching
RUN set -exu \
 && rm -f /etc/apt/apt.conf.d/docker-clean \
 && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
 && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# Basic APT stuff
RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
 && apt-get update -qq \
    # Avoid warnings
 && apt-get install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
 && apt-get install $APT_OPTS \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg-agent \
        software-properties-common \

        # Arm emulation
        binfmt-support \
        qemu-user-static \

        # Needed to install aws cli from pip
        python3-dev \
        python3-minimal \
        python3-pip \
        python3-setuptools

        # awscli

        # Ubuntu Docker repo
        # docker.io

# Install Docker
# https://docs.docker.com/engine/install/ubuntu/

# Add Docker repo
RUN set -exu \
 && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -qq - \
 && echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
 && apt-get update -qq \
 && apt-get install $APT_OPTS \
        docker-ce \
        docker-ce-cli \
        containerd.io
# RUN docker --version

RUN set -exu \
 && curl -L "https://github.com/docker/compose/releases/download/1.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
 && chmod +x /usr/local/bin/docker-compose

# Install latest awscli using pip
# RUN python3 --version
RUN --mount=type=cache,id=pip,target=/root/.cache/pip \
    set -exu \
 && python3 -m pip install wheel \
 && python3 -m pip install awscli

# Use ecr-credential-helper to access ECR repos
# https://github.com/awslabs/amazon-ecr-credential-helper
# This package is not in Ubuntu 18.04, it requires a newer release
RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
 && apt-get update -qq \
 && apt-get install $APT_OPTS \
        amazon-ecr-credential-helper

# RUN set -ex \
#  && mkdir -p /root/.docker \
#  && echo '{"credsStore": "ecr-login"}'> /root/.docker/config.json
