# syntax=docker/dockerfile:1.0-experimental
# syntax=docker/dockerfile:experimental
#
# Build an Elixir/Phoenix app.
#
# It takes advantage of caching and parallel build support in BuildKit.
# It can build in less than 5s after the initial build.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

ARG ELIXIR_VERSION=1.10.4
ARG NODE_VERSION=14.4
ARG DEBIAN_VERSION=buster-slim

# Make apt-get be quiet
ARG DEBIAN_FRONTEND=noninteractive
ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"

# Elixir release env to build
ARG MIX_ENV=prod

# Name of Elixir release
ARG RELEASE=app

# OS user that app runs under
ARG APP_USER=app

# Source Docker repository for images, default is docker.io
ARG DOCKER_REPO=""


##########################################################################
# Fetch dependencies

FROM ${DOCKER_REPO}elixir:${ELIXIR_VERSION} as deps

ARG http_proxy
ARG https_proxy=$http_proxy

ARG MIX_ENV

WORKDIR /app

COPY config ./config
COPY mix.exs .
COPY mix.lock .

# Mount hex and rebar cache directories as type=cache
RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force, deps.get --only $MIX_ENV

FROM deps AS test

ARG MIX_ENV

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY priv ./priv
COPY test ./test

RUN mix do compile

##########################################################################
# Build Phoenix assets
# Using stretch because it has Python

FROM ${DOCKER_REPO}node:${NODE_VERSION}-stretch AS assets
WORKDIR /app/assets

# Copy deps to get assets from phoenix
COPY --from=deps /app/deps /app/deps/

COPY assets/package.json assets/package-lock.json ./

# Cache npm cache directory as type=cache
RUN --mount=type=cache,target=~/.npm,sharing=locked \
    npm --prefer-offline --no-audit --progress=false \
    --loglevel=error ci

COPY assets .

RUN npm run deploy


##########################################################################
# Create Phoenix digest

FROM deps AS digest

ARG MIX_ENV
ARG RELEASE

COPY --from=assets /app/priv ./priv
# https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html
RUN mix phx.digest

# This does a partial compile.
# Doing "mix do compile, phx.digest, release" in a single stage is worse,
# because a single line of code changed causes a complete recompile.
# With the stages separated most of the compilation is cached.


##########################################################################
# Create release

FROM digest AS release

ARG MIX_ENV
ARG RELEASE

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY rel ./rel

RUN mix do compile, release $RELEASE


##########################################################################
# Create base image with runtime dependencies

FROM ${DOCKER_REPO}debian:${DEBIAN_VERSION} as runtime

ARG MIX_ENV
ARG RELEASE

ARG DEBIAN_FRONTEND
ARG APT_OPTS

ARG APP_USER
ARG APP_GROUP=$APP_USER

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=C.UTF-8 \
    HOME=/app \
    RELEASE_TMP=/run/app \
    RELEASE=${RELEASE} \
    PORT=4000

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# If LANG=C.UTF-8 is not enough, use full featured locale
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     set -exu \
#     && apt-get update -qq \
#     && apt-get install $APT_OPTS \
#       locales
#     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
#
# ENV LANG en_US.utf8

# Install openssl, allowing the app to listen on HTTPS.
# May not be needed if handled outside the application (e.g. in Kubernetes ingress).

# Create dirs needed by postgres-client but stripped from slim
# RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update -qq \
    #    # Avoid warnings
    # && apt-get install $APT_OPTS dialog apt-utils \
    #    # Enable installation of packages over https
    # && apt-get install $APT_OPTS \
    #        apt-transport-https \
    #        ca-certificates \
    #        curl \
    #        gnupg-agent \
    #        software-properties-common \
       # App deps
    && apt-get install $APT_OPTS \
        openssl \
        libpq-dev \
    && rm -rf /var/lib/dpkg

# Create user and group to run under with specific uid
RUN groupadd -g 1000 $APP_GROUP \
    && useradd -g 1000 -g $APP_GROUP $APP_USER \
    && rm /var/log/lastlog \
    && rm /var/log/faillog

# Create dirs writable by app user
RUN mkdir -p \
        /run/app \
    && chown -R $APP_USER:$APP_GROUP \
        /run/app

##########################################################################
# Dev app image

FROM ${DOCKER_REPO}elixir:${ELIXIR_VERSION} as dev

ARG http_proxy
ARG https_proxy=$http_proxy

ARG MIX_ENV
ARG RELEASE

ARG APP_USER
ARG APP_GROUP=$APP_USER

ENV LANG=C.UTF-8 \
    HOME=/app \
    PORT=4000

USER $APP_USER

WORKDIR /app

EXPOSE $PORT

CMD [ "sleep", "infinity" ]

##########################################################################
# Production app image which gets deployed

FROM runtime as deploy

ARG APP_USER
ARG APP_GROUP=$APP_USER

ARG MIX_ENV
ARG RELEASE

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=C.UTF-8 \
    HOME=/app \
    RELEASE_TMP=/run/app \
    RELEASE=${RELEASE} \
    PORT=4000

USER $APP_USER

# Setting WORKDIR after USER makes directory be owned by the user.
# The app needs to be able to write to a tmp directory on startup, which by
# default is under the release. This can be changed by setting RELEASE_TMP to
# /tmp or, more securely, /run/foo
WORKDIR /app

# Chown files while copying. Running "RUN chown -R app:app /app"
# adds an extra layer which is about 10Mb, a huge difference when the
# image for a new phoenix app is around 20Mb.

# TODO: For more security, change specific files to have group read/execute
# permissions while leaving them owned by root

COPY --from=release --chown=$APP_USER:$APP_GROUP /app/_build/$MIX_ENV/rel/${RELEASE} ./

EXPOSE $PORT

# "app" here is the name of the release
ENTRYPOINT ["bin/app"]
# TODO: configure using $RELEASE

# Run app in foreground
CMD ["start"]


##########################################################################
# Copy build artifacts to host

FROM scratch as artifacts

ARG MIX_ENV
ARG RELEASE

COPY --from=release /app/_build/$MIX_ENV/rel/${RELEASE} /release
COPY --from=release /app/priv/static /static

##########################################################################
# Default target
FROM deploy
