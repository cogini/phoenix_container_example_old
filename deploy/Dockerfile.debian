# syntax=docker/dockerfile:1.0-experimental
# syntax=docker/dockerfile:experimental
#
# Build app.
#
# It takes advantage of caching and parallel build support in BuildKit.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

ARG ELIXIR_VERSION=1.11.2

ARG ERLANG_VERSION=23.1.2

ARG NODE_VERSION=14.4

ARG AWS_CLI_VERSION=2.0.61

# Name used in Docker
ARG DEBIAN_VERSION=buster-slim
ARG ELIXIR_DEBIAN_VERSION=buster-20201012

# ARG ELIXIR_IMAGE_NAME=elixir
ARG ELIXIR_IMAGE_NAME=hexpm/elixir

# ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}
ARG ELIXIR_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}

# Name used in OS packages
ARG DEBIAN_CODENAME=buster

# Elixir release env to build
ARG MIX_ENV=prod

# Name of Elixir release, normally the app name
ARG RELEASE=app

# OS user that app runs under
ARG APP_USER=app

ARG APP_DIR=/app

# Docker registry for base images, default is docker.io
# If specified, should have a trailing slash
ARG REGISTRY=""

# Make apt-get be quiet
ARG DEBIAN_FRONTEND=noninteractive
ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"

##########################################################################
# Fetch dependencies

FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS deps


ARG http_proxy
ARG https_proxy=$http_proxy

ARG MIX_ENV

# Install tools and libraries to build binary libraries
# ARG DEBIAN_FRONTEND
# ARG APT_OPTS
# ARG DEBIAN_CODENAME

# Configure apt caching for use with BuildKit
# RUN set -exu \
#     && rm -f /etc/apt/apt.conf.d/docker-clean \
#     && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
#     && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression
#
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
#     set -exu \
#     && apt-get update -qq \
#     # Avoid warnings
#     # && apt-get install $APT_OPTS dialog apt-utils \
#     # Enable installation of packages over https
#     && apt-get install $APT_OPTS \
#         apt-transport-https \
#         ca-certificates \
#         curl \
#         build-essential \
#         git \
#         gnupg \
#         gnupg-agent \
#         # software-properties-common \
#     # Latest PostgreSQL
#     && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
#     && echo "deb http://apt.postgresql.org/pub/repos/apt/ $DEBIAN_CODENAME-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
#     && echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
#     && apt-get update \
#     && apt-get install $APT_OPTS \
#         libpq-dev \
#         postgresql-client-12

WORKDIR /app

# Get Elixir app deps
COPY config ./config
COPY mix.exs .
COPY mix.lock .

# Mount hex and rebar cache directories as type=cache
RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force, deps.get --only $MIX_ENV

FROM deps AS test

ARG MIX_ENV

WORKDIR /app

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY priv ./priv
COPY test ./test

RUN mix do compile

##########################################################################
# Build Phoenix assets
# Using stretch because it has Python

FROM ${REGISTRY}node:${NODE_VERSION}-stretch AS assets
WORKDIR /app/assets

# Copy deps to get assets from phoenix
COPY --from=deps /app/deps /app/deps/

COPY assets/package.json assets/package-lock.json ./

# Cache npm cache directory as type=cache
RUN --mount=type=cache,target=~/.npm,sharing=locked \
    npm --prefer-offline --no-audit --progress=false \
    --loglevel=error ci

COPY assets .

RUN npm run deploy

# Generate assets the old way
# RUN npm install \
#   && node node_modules/webpack/bin/webpack.js --mode production

# Install AWS cli binaries
# COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
# COPY --from=installer /aws-cli-bin/ /usr/local/bin/

##########################################################################
# Create Phoenix digest

FROM deps AS digest

ARG MIX_ENV
ARG RELEASE

COPY --from=assets /app/priv ./priv
# https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html
RUN mix phx.digest

# This does a partial compile.
# Doing "mix do compile, phx.digest, release" in a single stage is worse,
# because a single line of code changed causes a complete recompile.
# With the stages separated most of the compilation is cached.


##########################################################################
# Create release

FROM digest AS release

ARG MIX_ENV
ARG RELEASE

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY rel ./rel

RUN mix do compile, release $RELEASE


##########################################################################
# Stage binary installer files

FROM ${REGISTRY}debian:${DEBIAN_VERSION} AS installer

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG AWS_CLI_VERSION

# Install aws cli
# https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update -qq \
    # Avoid warnings
    # && apt-get install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    && apt-get install $APT_OPTS \
        # apt-transport-https \
        ca-certificates \
        curl \
        # gnupg-agent \
        # software-properties-common \
        # gnupg \
        unzip \
  && rm -rf /var/lib/dpkg \
  && curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip -o awscli-exe-linux-x86_64.zip \
  && unzip awscli-exe-linux-x86_64.zip \
  # Specify --bin-dir so we can copy the entire bin directory into
  # /usr/local/bin of the final stage without accidentally copying over any
  # other executables that may be present in /usr/local/bin of the installer stage.
  && ./aws/install --bin-dir /aws-cli-bin/

##########################################################################
# Create base image with runtime dependencies

FROM ${REGISTRY}debian:${DEBIAN_VERSION} AS runtime

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG DEBIAN_CODENAME

ARG MIX_ENV
ARG RELEASE

ARG APP_USER
ARG APP_GROUP=$APP_USER
ARG APP_DIR

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=C.UTF-8 \
    HOME=$APP_DIR \
    RELEASE_TMP=/run/app \
    RELEASE=${RELEASE} \
    PORT=4000

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# If LANG=C.UTF-8 is not enough, use full featured locale
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     set -exu \
#     && apt-get update -qq \
#     && apt-get install $APT_OPTS \
#       locales
#     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
#
# ENV LANG en_US.utf8

# Install openssl, allowing the app to listen on HTTPS.
# May not be needed if handled outside the application (e.g. in Kubernetes ingress).

# Create dirs needed by postgresql-client but stripped from slim
# RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update -qq \
    # Avoid warnings
    # && apt-get install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    # && apt-get install $APT_OPTS \
    #     apt-transport-https \
    #     ca-certificates \
    #     curl \
    #     gnupg \
    #     gnupg-agent \
    #     # software-properties-common \
    # App deps
    && apt-get install $APT_OPTS \
        # Runtime deps
        openssl \
        libpq-dev \
        # postgresql-client \
    # Latest PostgreSQL
    # && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
    # && echo "deb http://apt.postgresql.org/pub/repos/apt/ $DEBIAN_CODENAME-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
    # && echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
    # && apt-get update \
    # && apt-get install $APT_OPTS \
    #     libpq-dev \
    #     postgresql-client-12 \
    # Microsoft ODBC Driver for SQL Server
    # && curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc \
    # && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    # && export ACCEPT_EULA=Y \
    # && apt-get -qq update && apt-get install $APT_OPTS msodbcsql17 \
    && rm -rf /var/lib/dpkg

# Install AWS cli binaries
# COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
# COPY --from=installer /aws-cli-bin/ /usr/local/bin/

# Create OS user and group to run app under
RUN groupadd -g 1000 $APP_GROUP \
    && useradd -g 1000 -g $APP_GROUP $APP_USER \
    && rm /var/log/lastlog \
    && rm /var/log/faillog

# Create dirs writable by app user
RUN mkdir -p \
        /run/app \
    && chown -R $APP_USER:$APP_GROUP \
        /run/app

##########################################################################
# Dev app image

FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS dev

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG DEBIAN_CODENAME

ARG http_proxy
ARG https_proxy=$http_proxy

ARG MIX_ENV
ARG RELEASE

ARG APP_USER
ARG APP_GROUP=$APP_USER
ARG APP_DIR

# Set environment vars used by the app
ENV LANG=C.UTF-8 \
    HOME=$APP_DIR \
    PORT=4000

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# If LANG=C.UTF-8 is not enough, use full featured locale
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     set -exu \
#     && apt-get update -qq \
#     && apt-get install $APT_OPTS \
#       locales
#     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
#
# ENV LANG en_US.utf8

# Install openssl, allowing the app to listen on HTTPS.
# May not be needed if handled outside the application (e.g. in Kubernetes ingress).

# Create dirs needed by postgres-client but stripped from slim
# RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update -qq \
    # Avoid warnings
    # && apt-get install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    # && apt-get install $APT_OPTS \
    #     apt-transport-https \
    #     ca-certificates \
    #     curl \
    #     gnupg \
    #     gnupg-agent \
    #     # software-properties-common \
    # App deps
    && apt-get install $APT_OPTS \
        # Runtime deps
        openssl \
        libpq-dev \
        # postgresql-client \
        # Dev tools
        inotify-tools \
    # Latest PostgreSQL
    # && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
    # && echo "deb http://apt.postgresql.org/pub/repos/apt/ $DEBIAN_CODENAME-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
    # && echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
    # && apt-get update \
    # && apt-get install $APT_OPTS \
    #     libpq-dev \
    #     postgresql-client-12 \
    # Microsoft ODBC Driver for SQL Server
    # && curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc \
    # && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    # && export ACCEPT_EULA=Y \
    # && apt-get -qq update && apt-get install $APT_OPTS msodbcsql17 \
    && rm -rf /var/lib/dpkg

# Create user and group to run under with specific uid
RUN groupadd -g 1000 $APP_GROUP \
    && useradd -g 1000 -g $APP_GROUP $APP_USER \
    && rm /var/log/lastlog \
    && rm /var/log/faillog

# Create dirs writable by app user
RUN mkdir -p \
        /run/app \
    && chown -R $APP_USER:$APP_GROUP \
        /run/app

USER $APP_USER

WORKDIR $APP_DIR

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force

EXPOSE $PORT

CMD [ "sleep", "infinity" ]

##########################################################################
# Production app image which gets deployed

FROM runtime AS deploy

ARG APP_USER
ARG APP_GROUP=$APP_USER
ARG APP_DIR

ARG MIX_ENV
ARG RELEASE

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=C.UTF-8 \
    HOME=$APP_DIR \
    RELEASE_TMP=/run/app \
    RELEASE=${RELEASE} \
    PORT=4000

# Setting WORKDIR after USER makes directory be owned by the user.
# Setting it before makes it owned by root, which is more secure.
# The app needs to be able to write to a tmp directory on startup, which by
# default is under the release. This can be changed by setting RELEASE_TMP to
# /tmp or, more securely, /run/foo
WORKDIR $APP_DIR

# Startup script
# COPY bin ./bin

USER $APP_USER

# Chown files while copying. Running "RUN chown -R app:app /app"
# adds an extra layer which is about 10Mb, a huge difference when the
# image for a new phoenix app is around 20Mb.

# TODO: For more security, change specific files to have group read/execute
# permissions while leaving them owned by root

# Release is unpacked under current
# WORKDIR $APP_DIR/current

COPY --from=release --chown=$APP_USER:$APP_GROUP /app/_build/$MIX_ENV/rel/${RELEASE} ./

EXPOSE $PORT

# "app" here is the name of the release
ENTRYPOINT ["bin/app"]
# TODO: configure using $RELEASE

# Run app in foreground
CMD ["start"]

# Startup script
# CMD ["/app/bin/start-docker"]

##########################################################################
# Copy build artifacts to host

FROM scratch as artifacts

ARG MIX_ENV
ARG RELEASE

COPY --from=release /app/_build/$MIX_ENV/rel/${RELEASE} /release
COPY --from=release /app/priv/static /static

##########################################################################
# Default target
FROM deploy
