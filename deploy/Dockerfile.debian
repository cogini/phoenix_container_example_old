# syntax=docker/dockerfile:experimental
#
# Build app
#
# It takes advantage of caching and parallel build support in BuildKit.
#
# The "syntax" line must be the first thing in the file, as it enables the
# new syntax for caching, etc. see
# https://docs.docker.com/develop/develop-images/build_enhancements/
# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

ARG ELIXIR_VERSION=1.13.3
ARG OTP_VERSION=24.2
ARG NODE_VERSION=16.14.1

# ARG ELIXIR_DEBIAN_VERSION=buster-20210208
ARG ELIXIR_DEBIAN_VERSION=bullseye-20210902-slim
# ARG DEBIAN_VERSION=buster-slim
ARG DEBIAN_VERSION=bullseye-slim

ARG AWS_CLI_VERSION=2.0.61

# Build image
# ARG BUILD_IMAGE_NAME=elixir
# ARG BUILD_IMAGE_TAG=${ELIXIR_VERSION}
ARG BUILD_IMAGE_NAME=hexpm/elixir
ARG BUILD_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}

# Deploy base image
ARG DEPLOY_IMAGE_NAME=debian
ARG DEPLOY_IMAGE_TAG=$DEBIAN_VERSION

# Make apt-get be quiet
ARG DEBIAN_FRONTEND=noninteractive
ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"
ARG APT_OPTS_UPDATE="-qq --no-install-recommends"

# Docker registry for base images, default is docker.io
# If specified, should have a trailing slash
ARG REGISTRY=""

# Elixir release env to build
ARG MIX_ENV=prod

# Name of Elixir release
ARG RELEASE=prod
# This should match mix.exs, e.g.
# defp releases do
#   [
#     prod: [
#       include_executables_for: [:unix],
#     ],
#   ]
# end

# App name, used to name directories
ARG APP_NAME=app

# OS user that app runs under
ARG APP_USER=app

# OS group that app runs under
ARG APP_GROUP="$APP_USER"

# Dir that app runs under
ARG APP_DIR=/app

ARG LANG=C.UTF-8

ARG http_proxy
ARG https_proxy=$http_proxy

##########################################################################
# Fetch OS build dependencies

FROM ${REGISTRY}${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG} AS os-deps

ARG http_proxy
ARG https_proxy

ARG LANG

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG APT_OPTS_UPDATE

ARG NODE_VERSION

# Configure apt caching for use with BuildKit
# The default Debian image has special config to avoid caches, but we want them now
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && printf 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && printf 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# Install tools and libraries to build binary libraries
# Not necessary for a minimal Phoenix app, but likely needed
RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update $APT_OPTS_UPDATE \
    # Avoid warnings
    # && apt-get -y install $APT_OPTS dialog apt-utils \
    && apt-get -y install $APT_OPTS \
        # Enable installation of packages over https
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        gnupg-agent \
        # software-properties-common \
        build-essential \
        git \
        lsb-release \

        # node needs python2
        python-dev \
        python-minimal \
        python-pip \
        python-setuptools \
        # Installed via pip
        # python-virtualenv \

        # python3-dev \
        # python3-minimal \
        # python3-pip \
        # python3-setuptools \

    # Install using n
    && curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n \
    && chmod +x /usr/local/bin/n \
    # Install lts version
    # && n lts \
    # Install specific version
    && n "$NODE_VERSION" \
    && rm /usr/local/bin/n

    # Latest postgres
    # && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
    # && echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
    # && echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
    # && apt-get update $APT_OPTS_UPDATE \
    # && apt-get -y install $APT_OPTS \
    #     libpq-dev \
    #     postgresql-client

    # Microsoft ODBC Driver for SQL Server
    # && curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc \
    # && curl -s https://packages.microsoft.com/config/debian/10/prod.list -o /etc/apt/sources.list.d/mssql-release.list \
    # && export ACCEPT_EULA=Y \
    # && apt-get -qq update $APT_OPTS_UPDATE && apt-get -y install $APT_OPTS msodbcsql17 \
    # && rm -rf /var/lib/dpkg

    # && rm -rf /var/lib/apt/lists/*

##########################################################################
# Fetch app library dependencies

FROM os-deps AS deps

ARG http_proxy
ARG https_proxy
ARG LANG
ARG MIX_ENV

WORKDIR /app

# Get Elixir app deps
COPY config ./config
COPY mix.exs .
COPY mix.lock .

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force, deps.get
    # mix do local.rebar --force, local.hex --force, deps.get --only $MIX_ENV

##########################################################################
# Environment to run tests

FROM deps AS test

ARG LANG
ARG MIX_ENV

WORKDIR /app

# Instead of copying sources, could use bind mount, e.g.
# RUN --mount=target=.
# see https://adoptingerlang.org/docs/production/docker/#efficient-caching
COPY lib ./lib
COPY priv ./priv
COPY test ./test
COPY bin ./bin

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix compile

##########################################################################
# Build Phoenix assets

FROM os-deps AS assets

ARG LANG

# Get assets from phoenix
COPY --from=deps /app/deps /app/deps/

WORKDIR /app/assets


COPY assets/package.json assets/package-lock.json ./

# Cache npm cache directory as type=cache
RUN --mount=type=cache,target=~/.npm,sharing=locked \
    npm --prefer-offline --no-audit --progress=false --loglevel=error ci

COPY assets ./

RUN npm run deploy

# Generate assets the old way
# RUN npm install \
#   && node node_modules/webpack/bin/webpack.js --mode production

# Install AWS cli binaries
# COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
# COPY --from=installer /aws-cli-bin/ /usr/local/bin/

##########################################################################
# Create Phoenix digest

FROM deps AS digest

ARG LANG
ARG MIX_ENV

COPY --from=assets /app/priv ./priv

# https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html
RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix phx.digest

# This does a partial compile.
# Doing "mix do compile, phx.digest, release" in a single stage is worse,
# because a single line of code changed causes a complete recompile.
# With the stages separated most of the compilation is cached.

##########################################################################
# Create release

FROM digest AS release

ARG MIX_ENV
ARG LANG
ARG RELEASE

COPY lib ./lib
COPY rel ./rel

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do compile, release "$RELEASE"

##########################################################################
# Stage binary installer files

FROM ${REGISTRY}${DEPLOY_IMAGE_NAME}:${DEPLOY_IMAGE_TAG} AS installer

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG APT_OPTS_UPDATE
ARG AWS_CLI_VERSION

# Install AWS CLI v2 from binary package
# https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update $APT_OPTS_UPDATE \
    # Avoid warnings
    # && apt-get -y install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    && apt-get -y install $APT_OPTS \
        # apt-transport-https \
        ca-certificates \
        curl \
        # gnupg-agent \
        # software-properties-common \
        # gnupg \
        unzip \
  && rm -rf /var/lib/dpkg \
  # && rm -rf /var/lib/apt/lists/* \

  # Install AWS CLI
  && curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip -o awscli-exe-linux-x86_64.zip \
  && unzip awscli-exe-linux-x86_64.zip \
  # Specify --bin-dir so we can copy the entire bin directory into
  # /usr/local/bin of the final stage without accidentally copying over any
  # other executables that may be present in /usr/local/bin of the installer stage.
  && ./aws/install --bin-dir /aws-cli-bin/

##########################################################################
# Create base image with runtime dependencies

FROM ${REGISTRY}${DEPLOY_IMAGE_NAME}:${DEPLOY_IMAGE_TAG} AS runtime

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG APT_OPTS_UPDATE

ARG LANG
ARG APP_NAME
ARG APP_USER
ARG APP_GROUP
ARG APP_DIR

ARG MIX_ENV
ARG RELEASE

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=$LANG \
    HOME=$APP_DIR \
    RELEASE_TMP="/run/$APP_NAME" \
    RELEASE=${RELEASE} \
    PORT=4000

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# If LANG=C.UTF-8 is not enough, build full featured locale
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     set -exu \
#     && apt-get update $APT_OPTS_UPDATE \
#     && apt-get -y install $APT_OPTS \
#       locales
#     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
#
# ENV LANG en_US.utf8

# Install openssl, allowing the app to listen on HTTPS.
# May not be needed if handled outside the application (e.g. in Kubernetes ingress).

# Create dirs needed by postgresql-client but stripped from slim
# RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu \
    && apt-get update $APT_OPTS_UPDATE \
    # Avoid warnings
    # && apt-get -y install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    && apt-get -y install $APT_OPTS \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        gnupg-agent \
        # software-properties-common \
        lsb-release \
    # App deps
    && apt-get -y install $APT_OPTS \
        # Runtime deps
        openssl
        # tini \
        # bind-utils \

        # Default Postgres
        # libpq-dev \
        # postgresql-client \

    # Latest PostgreSQL
    # && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
    # && echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
    # && echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
    # && apt-get update $APT_OPTS_UPDATE \
    # && apt-get -y install $APT_OPTS \
    #     libpq-dev \
    #     postgresql-client \

    # Microsoft ODBC Driver for SQL Server
    # && curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc \
    # && curl -s https://packages.microsoft.com/config/debian/10/prod.list -o /etc/apt/sources.list.d/mssql-release.list \
    # && export ACCEPT_EULA=Y \
    # && apt-get -qq update && apt-get -y install $APT_OPTS msodbcsql17 \
    # && rm -rf /var/lib/dpkg
    # && rm -rf /var/lib/apt/lists/*

# Install AWS CLI 2.x binaries
# COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
# COPY --from=installer /aws-cli-bin/ /usr/local/bin/

# Create OS user and group to run app under
RUN groupadd -g 1000 "$APP_GROUP" \
    && useradd -u 1000 -g "$APP_GROUP" "$APP_USER" \
    && rm /var/log/lastlog \
    && rm /var/log/faillog

# Create dirs writable by app user
RUN mkdir -p \
        "/run/$APP_NAME" \
    && chown -R "$APP_USER:$APP_GROUP" \
        "/run/$APP_NAME"

##########################################################################
# Dev image which mounts code from local filesystem

# FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS dev
FROM os-deps AS dev

ARG DEBIAN_FRONTEND
ARG APT_OPTS
ARG APT_OPTS_UPDATE

ARG http_proxy
ARG https_proxy=$http_proxy

ARG LANG
ARG MIX_ENV

ARG APP_NAME
ARG APP_USER
ARG APP_GROUP
ARG APP_DIR

# Set environment vars used by the app
ENV LANG=$LANG \
    HOME=$APP_DIR \
    PORT=4000

# Configure apt caching for use with BuildKit
RUN set -exu \
    && rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
    && echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

# If LANG=C.UTF-8 is not enough, use full featured locale
# RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#     set -exu \
#     && apt-get update $APT_OPTS_UPDATE \
#     && apt-get -y install $APT_OPTS \
#       locales
#     && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
#
# ENV LANG en_US.utf8

# Install openssl, allowing the app to listen on HTTPS.
# May not be needed if handled outside the application (e.g. in Kubernetes ingress).

# Create dirs needed by postgres-client but stripped from slim
# RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    set -exu -o pipefail \
    && apt-get update $APT_OPTS_UPDATE \
    # Avoid warnings
    # && apt-get -y install $APT_OPTS dialog apt-utils \
    # Enable installation of packages over https
    && apt-get -y install $APT_OPTS \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        gnupg-agent \
        # software-properties-common \
        lsb-release \
    # App deps
    && apt-get -y install $APT_OPTS \
        # Runtime deps
        openssl \

        # Default postgres
        # libpq-dev \
        # postgresql-client \

        # Dev tools
        ca-certificates \
        curl \
        git \
        gzip \
        inotify-tools \
        ssh \
        sudo \
        tar \

    # Install newer version of nodejs
        # nodejs npm \
    # && npm install -g n \
    # # Install lts version
    # # && n lts \
    # # Install specific version
    # && n "$NODE_VERSION" \
    # && apt-get purge -y nodejs npm \

    # Install using n
    # && curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n \
    # && chmod +x /usr/local/bin/n \
    # # Install lts version
    # # && n lts \
    # # Install specific version
    # && n "$NODE_VERSION" \
    # && rm /usr/local/bin/n \

    # Latest postgres
    && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc \
    && printf "deb http://apt.postgresql.org/pub/repos/apt/ %s-pgdg main" "$(lsb_release -sc)" | tee /etc/apt/sources.list.d/pgdg.list \
    && printf "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref \
    && apt-get update $APT_OPTS_UPDATE \
    && apt-get -y install $APT_OPTS \
        libpq-dev \
        postgresql-client

    # Microsoft ODBC Driver for SQL Server
    # && curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc \
    # && curl -s https://packages.microsoft.com/config/debian/10/prod.list -o /etc/apt/sources.list.d/mssql-release.list \
    # && export ACCEPT_EULA=Y \
    # && apt-get -qq update && apt-get -y install $APT_OPTS msodbcsql17 \

    # && rm -rf /var/lib/dpkg
    # && rm -rf /var/lib/apt/lists/*

# Create user and group to run under with specific uid
RUN groupadd -g 10001 "$APP_GROUP" \
    && useradd -u 10000 -g "$APP_GROUP" "$APP_USER" \
    && rm /var/log/lastlog \
    && rm /var/log/faillog

    # Create app dirs
RUN mkdir -p "/run/$APP_NAME" \
    # Make dirs writable by app
    && chown -R "$APP_USER:$APP_GROUP" \
        # Needed for RELEASE_TMP
        "/run/$APP_NAME"

USER $APP_USER

WORKDIR $APP_DIR

RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \
    --mount=type=cache,target=~/.cache/rebar3,sharing=locked \
    mix do local.rebar --force, local.hex --force

EXPOSE $PORT

CMD [ "sleep", "infinity" ]

##########################################################################
# Create final app image which gets deployed

FROM runtime AS deploy

ARG LANG

ARG APP_USER
ARG APP_GROUP
ARG APP_DIR

ARG MIX_ENV
ARG RELEASE

# Set environment vars used by the app
# SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application
# maybe set COOKIE and other things
ENV LANG=$LANG \
    HOME=$APP_DIR \
    RELEASE_TMP="/run/$APP_NAME" \
    RELEASE=${RELEASE} \
    PORT=4000

# Setting WORKDIR after USER makes directory be owned by the user.
# Setting it before makes it owned by root, which is more secure.
# The app needs to be able to write to a tmp directory on startup, which by
# default is under the release. This can be changed by setting RELEASE_TMP to
# /tmp or, more securely, /run/foo
WORKDIR $APP_DIR

# When using a startup script, copy to /app/bin
# COPY bin ./bin

USER $APP_USER

# Chown files while copying. Running "RUN chown -R app:app /app"
# adds an extra layer which is about 10Mb, a huge difference when the
# image for a new phoenix app is around 20Mb.

# TODO: For more security, change specific files to have group read/execute
# permissions while leaving them owned by root

# When using a startup script, unpack release under "/app/current" dir
# WORKDIR $APP_DIR/current

COPY --from=release --chown="$APP_USER:$APP_GROUP" "/app/_build/$MIX_ENV/rel/${RELEASE}" ./

EXPOSE $PORT

# "bin" is the directory under the unpacked release, and "prod" is the name of the release
ENTRYPOINT ["bin/prod"]
# ENTRYPOINT ["/sbin/tini", "--", "bin/prod"]

# Run app in foreground
CMD ["start"]

# Run via startup script
# CMD ["/app/bin/start-docker"]

##########################################################################
# Scan for security vulnerabilities

FROM deploy as vuln

ARG APT_OPTS
ARG APT_OPTS_UPDATE

# USER root

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    apt-get -y install $APT_OPTS \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        gnupg-agent \
        # software-properties-common \
        lsb-release \
    && curl -sL https://aquasecurity.github.io/trivy-repo/deb/public.key -o /etc/apt/trusted.gpg.d/trivy.asc \
    && printf "deb https://aquasecurity.github.io/trivy-repo/deb %s main" "$(lsb_release -sc)" | tee -a /etc/apt/sources.list.d/trivy.list \
    && apt-get update $APT_OPTS_UPDATE \
    && apt-get -y install $APT_OPTS \
        trivy

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
    --mount=type=cache,target=/root/.cache/trivy,sharing=locked \
    # Succeed for issues of severity = HIGH
    trivy filesystem --exit-code 0 --severity HIGH --no-progress / \
    # Fail build if there are any issues of severity = CRITICAL
    && trivy filesystem --exit-code 1 --severity CRITICAL --no-progress /
    # Fail build if there are any issues
    # && trivy filesystem -d --exit-code 1 --no-progress /

    # && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    # && grype -vv --fail-on medium dir:/ \

##########################################################################
# Copy build artifacts to host

FROM scratch as artifacts

ARG MIX_ENV
ARG RELEASE

COPY --from=release /app/_build/$MIX_ENV/rel/${RELEASE} /release
COPY --from=release /app/priv/static /static

##########################################################################
# Default target
FROM deploy
