VERSION --shell-out-anywhere --use-copy-include-patterns --referenced-save-only 0.6

# App versions
ARG ELIXIR_VERSION=1.13.3
# ARG OTP_VERSION=23.3.4
ARG OTP_VERSION=24.2
ARG NODE_VERSION=16.14.1
# ARG NODE_VERSION=lts

ARG AWS_CLI_VERSION=2.0.61

# ARG ELIXIR_DEBIAN_VERSION=buster-20210208
ARG ELIXIR_DEBIAN_VERSION=bullseye-20210902-slim

# ARG DEBIAN_VERSION=buster-slim
ARG DEBIAN_VERSION=bullseye-slim

# Docker registries for base images. If blank, will use docker.io.
# If specified, should have a trailing slash.
# REGISTRY is a private registry, e.g. 123.dkr.ecr.ap-northeast-1.amazonaws.com/
# PUBLIC_REGISTRY is for public base images, e.g. debian or alpine
# Public images may be mirrored into the private registry, e.g. with skopeo
ARG REGISTRY=""
ARG PUBLIC_REGISTRY=$REGISTRY

ARG BUILD_IMAGE_NAME=${PUBLIC_REGISTRY}hexpm/elixir
ARG BUILD_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}

ARG DEPLOY_IMAGE_NAME=${PUBLIC_REGISTRY}debian
ARG DEPLOY_IMAGE_TAG=$DEBIAN_VERSION

ARG INSTALL_IMAGE_NAME=$DEPLOY_IMAGE_NAME
ARG INSTALL_IMAGE_TAG=$DEPLOY_IMAGE_TAG

# Additional packages to install
ARG BUILD_EXTRA=""
ARG INSTALL_EXTRA=""
ARG DEPLOY_EXTRA=""

# OS user for app to run under
# Distroless user
# nonroot:x:65532:65532:nonroot:/home/nonroot:/sbin/nologin
ARG APP_USER=nonroot
# OS group that app runs under
ARG APP_GROUP=$APP_USER
# OS numeric user and group id
ARG APP_USER_ID=65532
ARG APP_GROUP_ID=$APP_USER_ID

ARG LANG=C.UTF-8

# Make apt-get be quiet
# ARG DEBIAN_FRONTEND=noninteractive
# ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"
# ARG APT_OPTS_UPDATE="-qq"

# Create build base image with OS dependencies
build-os-deps:
    FROM ${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}

    # Configure apt caching for use with BuildKit
    # The default Debian Docker image has special config to clear caches.
    # If we are using --mount=type=cache, then we want it.
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        # Avoid warnings on older versions of Debian/Ubuntu
        # apt-get -y install $APT_OPTS dialog apt-utils && \
        # Enable installation of packages over https
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            gnupg-agent \
            # software-properties-common \
            build-essential \
            git \
            lsb-release \
            jq \
            $BUILD_EXTRA && \

        # Install node using n
        curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && \
        chmod +x /usr/local/bin/n && \
        # Install lts version
        # n lts && \
        # Install specific version
        n "$NODE_VERSION" && \
        rm /usr/local/bin/n && \

        # Install latest Postgres
        # curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc && \
        # echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
        # echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref && \
        # apt-get update -qq && \
        # apt-get -y install $APT_OPTS \
        #     libpq-dev \
        #     postgresql-client &&

        # Install Microsoft ODBC Driver for SQL Server
        # curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc && \
        # curl -s https://packages.microsoft.com/config/debian/11/prod.list -o /etc/apt/sources.list.d/mssql-release.list && \
        # export ACCEPT_EULA=Y && \
        # apt-get -qq update -qq && apt-get -y install $APT_OPTS msodbcsql17 && \
        # rm -rf /var/lib/dpkg &&

        # apt-get clean &&
        # apt-get remove curl \
        # apt-get clean && \
        # apt-get autoremove -y && \
        # apt-get purge -y --auto-remove && \
        # info on installed packages
        # rm -rf /var/lib/dpkg && \
        # rm -rf /var/cache/debconf && \
        # Logs for installed packages
        rm -rf /var/log/apt/* && \
        rm -rf /var/log/dpkg.log
        # apt-get update files
        # rm -rf /var/lib/apt/lists/*

    SAVE IMAGE --cache-hint

# Staging image for binaries which are copied into final deploy image
deploy-install:
    FROM ${INSTALL_IMAGE_NAME}:${INSTALL_IMAGE_TAG}

    # Configure apt caching for use with BuildKit
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        # Avoid warnings
        # apt-get -y install $APT_OPTS dialog apt-utils \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            # apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            # software-properties-common \
            gnupg \
            unzip \
            lsb-release \
            locales \
            # Needed by Erlang VM
            libtinfo6 \
            $INSTALL_EXTRA && \

        curl -sL https://aquasecurity.github.io/trivy-repo/deb/public.key -o /etc/apt/trusted.gpg.d/trivy.asc && \
        printf "deb https://aquasecurity.github.io/trivy-repo/deb %s main" "$(lsb_release -sc)" | tee -a /etc/apt/sources.list.d/trivy.list && \
        apt-get update -qq && \
        apt-get -y install -y -qq --no-install-recommends trivy && \

        # curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin && \

        # Generate locales specified in /etc/locale.gen
        locale-gen && \

        # apt-get clean && \
        # apt-get autoremove -y && \
        # apt-get purge -y --auto-remove && \
        # info on installed packages
        # rm -rf /var/lib/dpkg && \
        # rm -rf /var/cache/debconf && \
        # rm -rf /var/cache/apt/archives/*
        # Logs for installed packages
        rm -rf /var/log/apt/* && \
        rm -rf /var/log/dpkg.log
        # apt-get update files
        # rm -rf /var/lib/apt/lists/*

    # If LANG=C.UTF-8 is not enough, build full featured locale
    # RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
    #
    # ENV LANG en_US.utf8

    # Install AWS CLI v2 from binary package
    # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    # https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
    # RUN set -ex && \
    #     curl -sSfL "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m)-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && \
    #     unzip -q awscliv2.zip && \
    #     ./aws/install && \
    #     rm -rf ./aws && \
    #     rm awscliv2.zip

    SAVE ARTIFACT /usr/lib/locale/C.UTF-8

    SAVE ARTIFACT /usr/local/bin/trivy /trivy/bin/trivy
    SAVE ARTIFACT /usr/local/share/trivy/templates /trivy/share/templates
    # SAVE ARTIFACT /usr/local/bin/grype

    SAVE IMAGE --cache-hint

deploy-base:
    FROM ${DEPLOY_IMAGE_NAME}:${DEPLOY_IMAGE_TAG}

    # Default ENV
    # HOME=/root
    # PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    # PWD=/

    # Create OS user and group to run app under
    RUN groupadd -g "$APP_GROUP_ID" "$APP_GROUP" && \
        useradd -u "$APP_USER_ID" -g "$APP_GROUP" "$APP_USER" && \
        rm /var/log/lastlog && \
        rm /var/log/faillog

    COPY +deploy-install/C.UTF-8 /usr/lib/locale/C.UTF-8

    ENV LANG=$LANG

    # Configure apt caching for use with BuildKit
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    # Create dirs needed by postgresql-client but stripped from slim
    # RUN seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{}

    RUN set -exu && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            ca-certificates \

            # Install openssl, allowing app to listen on HTTPS.
            # May not be needed if handled outside the application (e.g. in load balancer).
            openssl \

            # https://github.com/krallin/tini
            # tini \
            # bind-utils \

            # Needed by Erlang VM
            libtinfo6 \

            # Default Postgres
            # libpq-dev \
            # postgresql-client \

            # Latest PostgreSQL
            # curl && \
            # curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc && \
            # echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
            # echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref && \
            # apt-get update $APT_OPTS_UPDATE && \
            # apt-get -y install $APT_OPTS \
            #     libpq-dev \
            #     postgresql-client \

            # Microsoft ODBC Driver for SQL Server
            # curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc && \
            # curl -s https://packages.microsoft.com/config/debian/11/prod.list -o /etc/apt/sources.list.d/mssql-release.list && \
            # export ACCEPT_EULA=Y && \
            # apt-get -qq update && apt-get -y install $APT_OPTS msodbcsql17 && \

            $DEPLOY_EXTRA && \

        # apt-get remove curl \
        # apt-get clean && \
        # apt-get autoremove -y && \
        # apt-get purge -y --auto-remove && \
        # info on installed packages
        # rm -rf /var/lib/dpkg && \
        # rm -rf /var/cache/debconf && \
        # Logs for installed packages
        rm -rf /var/log/apt/* && \
        rm -rf /var/log/dpkg.log
        # apt-get update files
        # rm -rf /var/lib/apt/lists/*

    SAVE IMAGE --cache-hint

# Scan deploy image for security vulnerabilities
deploy-scan:
    FROM +deploy-base

    COPY +deploy-install/trivy/bin/trivy /usr/local/bin/trivy
    COPY +deploy-install/trivy/share/templates /usr/local/share/trivy/templates
    # COPY +deploy-install/grype /usr/local/bin/grype

    SAVE IMAGE --cache-hint
