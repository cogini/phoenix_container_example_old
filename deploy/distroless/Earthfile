# Deploy using distroless image
# https://github.com/GoogleContainerTools/distroless
VERSION --shell-out-anywhere --use-copy-include-patterns --referenced-save-only 0.6

# Specify versions of Erlang, Elixir, and base OS.
# Choose a combination supported by https://hub.docker.com/r/hexpm/elixir/tags

ARG ELIXIR_VERSION=1.14.3
ARG OTP_VERSION=25.2.2

# ARG ELIXIR_DEBIAN_VERSION=buster-20210208
# ARG ELIXIR_DEBIAN_VERSION=bullseye-20210902-slim
# ARG ELIXIR_DEBIAN_VERSION=bullseye-20221004-slim
ARG ELIXIR_DEBIAN_VERSION=bullseye-20230109-slim

# https://docker.debian.net/
# https://hub.docker.com/_/debian
# ARG DEBIAN_VERSION=buster-slim
ARG DEBIAN_VERSION=bullseye-slim

# Use snapshot for consistent dependencies, see https://snapshot.debian.org/
# ARG DEBIAN_SNAPSHOT=20221219
ARG DEBIAN_SNAPSHOT=20230109

ARG NODE_VERSION=16.14.1
# ARG NODE_VERSION=lts

ARG AWS_CLI_VERSION=2.0.61

# Docker registry for internal images, e.g. 123.dkr.ecr.ap-northeast-1.amazonaws.com/
# If blank, docker.io will be used. If specified, should have a trailing slash.
ARG REGISTRY=""
# Registry for public images, e.g. debian, alpine, or postgres.
# Public images may be mirrored into the private registry, with e.g. Skopeo
ARG PUBLIC_REGISTRY=$REGISTRY

# Base image for build and test
ARG BUILD_BASE_IMAGE_NAME=${PUBLIC_REGISTRY}hexpm/elixir
ARG BUILD_BASE_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}

# Base for final prod image
# https://github.com/GoogleContainerTools/distroless/blob/main/base/README.md
ARG PROD_BASE_IMAGE_NAME=gcr.io/distroless/base-debian11
# ARG PROD_BASE_IMAGE_TAG=debug-nonroot
# ARG PROD_BASE_IMAGE_TAG=latest
# debug includes busybox, which we need to run Erlang startup scripts
ARG PROD_BASE_IMAGE_TAG=debug

# Intermediate image for files copied to prod
ARG INSTALL_BASE_IMAGE_NAME=${PUBLIC_REGISTRY}debian
ARG INSTALL_BASE_IMAGE_TAG=bullseye-slim

ARG LANG=C.UTF-8


# Set arch in Linux naming convention
ARG TARGETARCH

FROM ${PUBLIC_REGISTRY}busybox
ARG LINUX_ARCH=$(uname -m)

# Create build base image with OS dependencies
build-os-deps:
    FROM ${BUILD_BASE_IMAGE_NAME}:${BUILD_BASE_IMAGE_TAG}
    ENV LANG=$LANG

    # Create OS user and group to run app under
    RUN if ! grep -q "$APP_USER" /etc/passwd; \
        then groupadd -g "$APP_GROUP_ID" "$APP_GROUP" && \
        useradd -l -u "$APP_USER_ID" -g "$APP_GROUP" -s /usr/sbin/nologin "$APP_USER" && \
        rm /var/log/lastlog && rm /var/log/faillog; fi

    # Configure apt caching for use with BuildKit.
    # The default Debian Docker image has special apt config to clear caches,
    # but if we are using --mount=type=cache, then we want to keep the files.
    # https://github.com/debuerreotype/debuerreotype/blob/master/scripts/debuerreotype-minimizing-config
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends ca-certificates

    RUN set -exu && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian/${DEBIAN_SNAPSHOT} bullseye main" > /etc/apt/sources.list && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian-security/${DEBIAN_SNAPSHOT} bullseye-security main" >> /etc/apt/sources.list && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian/${DEBIAN_SNAPSHOT} bullseye-updates main" >> /etc/apt/sources.list

    # Install tools and libraries to build binary libraries
    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            # Enable installation of packages over https
            apt-transport-https \
            build-essential \
            # Enable app to make outbound SSL calls.
            ca-certificates \
            curl \
            git \
            gnupg \
            gnupg-agent \
            jq \
            # software-properties-common \
            lsb-release \
            openssh-client \
            # Support ssl in container, as opposed to load balancer
            openssl \
            # Install default nodejs
            nodejs \
            # Install default Postgres
            # libpq-dev \
            # postgresql-client \
            # $RUNTIME_PACKAGES \
        && \
        # Install yarn
        curl -sL --ciphers ECDHE-RSA-AES128-GCM-SHA256 https://dl.yarnpkg.com/debian/pubkey.gpg -o /etc/apt/trusted.gpg.d/yarn.asc && \
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && \
        printf "Package: *\nPin: release o=dl.yarnpkg.com\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/yarn.pref && \
        # Install Trivy
        # curl -sL https://aquasecurity.github.io/trivy-repo/deb/public.key -o /etc/apt/trusted.gpg.d/trivy.asc && \
        # printf "deb https://aquasecurity.github.io/trivy-repo/deb %s main" "$(lsb_release -sc)" | tee -a /etc/apt/sources.list.d/trivy.list && \
        apt-get update -qq && \
        apt-get -y install -y -qq --no-install-recommends yarn && \
        # apt-get -y install -y -qq --no-install-recommends trivy && \
        # curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin && \
        # Install node using n
        # curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && \
        # chmod +x /usr/local/bin/n && \
        # # Install lts version of node
        # # n lts && \
        # # Install specific version of node
        # n "$NODE_VERSION" && \
        # rm /usr/local/bin/n && \
        # Install yarn from repo
        # curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg -o /etc/apt/trusted.gpg.d/yarn.asc && \
        # echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && \
        # echo "Package: *\nPin: release o=dl.yarnpkg.com\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/yarn.pref && \
        # apt-get update -qq && \
        # apt-get -y install -y -qq --no-install-recommends yarn && \
        # Install latest Postgres from postgres.org repo
        # curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc && \
        # echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
        # echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref && \
        # apt-get update -qq && \
        # apt-get -y install -y -qq --no-install-recommends libpq-dev postgresql-client &&
        # Install Microsoft ODBC Driver for SQL Server
        # curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc && \
        # curl -s https://packages.microsoft.com/config/debian/11/prod.list -o /etc/apt/sources.list.d/mssql-release.list && \
        # export ACCEPT_EULA=Y && \
        # apt-get -qq update -qq && \
        # apt-get -y install -y -qq --no-install-recommends msodbcsql17 && \
        # Install specific version of mysql from MySQL repo
        # mysql-5.7 is not available for Debian Bullseye (11), only Buster (10)
        # The key id comes from this page: https://dev.mysql.com/doc/refman/5.7/en/checking-gpg-signature.html
        # # apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3A79BD29
        # #   gpg: key 3A79BD29: public key "MySQL Release Engineering <mysql-build@oss.oracle.com>" imported
        # export APT_KEY='859BE8D7C586F538430B19C2467B942D3A79BD29' && \
        # export GPGHOME="$(mktemp -d)" && \
        # gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$APT_KEY" && \
        # mkdir -p /etc/apt/keyrings && \
        # gpg --batch --export "$APT_KEY" > /etc/apt/keyrings/mysql.gpg && \
        # gpgconf --kill all && \
        # rm -rf "$GPGHOME" && \
        # rm -rf "${HOME}/.gnupg" && \
        # echo "deb [ signed-by=/etc/apt/keyrings/mysql.gpg ] http://repo.mysql.com/apt/debian/ $(lsb_release -sc) mysql-5.7" | tee /etc/apt/sources.list.d/mysql.list && \
        # echo "Package: *\nPin: release o=repo.mysql.com\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/mysql.pref && \
        # apt-get update -qq && \
        # DEBIAN_FRONTEND=noninteractive \
        # apt-get -y install -y -qq --no-install-recommends libmysqlclient-dev mysql-client && \
        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html
        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html
        # Remove packages installed temporarily. Removes everything related to
        # packages, including the configuration files, and packages
        # automatically installed because a package required them but, with the
        # other packages removed, are no longer needed.
        # apt-get purge -y --auto-remove curl && \
        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html
        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html
        # Delete local repository of retrieved package files in /var/cache/apt/archives
        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean
        # Use this if not running --mount=type=cache.
        # apt-get clean && \
        # Delete info on installed packages. This saves some space, but it can
        # be useful to have them as a record of what was installed, e.g. for auditing.
        # rm -rf /var/lib/dpkg && \
        # Delete debconf data files to save some space
        # rm -rf /var/cache/debconf && \
        # Delete index of available files from apt-get update
        # Use this if not running --mount=type=cache.
        # rm -rf /var/lib/apt/lists/*
        # Clear logs of installed packages
        truncate -s 0 /var/log/apt/* && \
        truncate -s 0 /var/log/dpkg.log

    SAVE IMAGE --cache-hint


# Create staging image for files which are copied into final prod image
prod-install:
    FROM ${INSTALL_BASE_IMAGE_NAME}:${INSTALL_BASE_IMAGE_TAG}

    # Configure apt caching for use with BuildKit.
    # The default Debian Docker image has special config to clear caches.
    # If we are using --mount=type=cache, then we want it to preserve cached files.
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends ca-certificates

    RUN set -exu && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian/${DEBIAN_SNAPSHOT} bullseye main" > /etc/apt/sources.list && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian-security/${DEBIAN_SNAPSHOT} bullseye-security main" >> /etc/apt/sources.list && \
        echo "deb [check-valid-until=no] https://snapshot.debian.org/archive/debian/${DEBIAN_SNAPSHOT} bullseye-updates main" >> /etc/apt/sources.list

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            # apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            # software-properties-common \
            gnupg \
            unzip \
            lsb-release \
            # busybox-static \
            locales \
            # Needed by Erlang VM
            libtinfo6 \
            # Additional libs
            libstdc++6 \
            libgcc-s1 \
            # debootstrap \
            # schroot \
        && \
        # curl -sL https://aquasecurity.github.io/trivy-repo/deb/public.key -o /etc/apt/trusted.gpg.d/trivy.asc && \
        # printf "deb https://aquasecurity.github.io/trivy-repo/deb %s main" "$(lsb_release -sc)" | tee -a /etc/apt/sources.list.d/trivy.list && \
        # apt-get update -qq && \
        # apt-get -y install -y -qq --no-install-recommends trivy && \
        # curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin && \
        # Generate locales specified in /etc/locale.gen
        locale-gen && \
        # Remove packages installed temporarily. Removes everything related to
        # packages, including the configuration files, and packages
        # automatically installed because a package required them but, with the
        # other packages removed, are no longer needed.
        # apt-get purge -y --auto-remove curl && \
        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html
        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html
        # Delete local repository of retrieved package files in /var/cache/apt/archives
        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean
        # Use this if not running --mount=type=cache.
        # apt-get clean && \
        # Delete info on installed packages. This saves some space, but it can
        # be useful to have them as a record of what was installed, e.g. for auditing.
        # rm -rf /var/lib/dpkg && \
        # Delete debconf data files to save some space
        # rm -rf /var/cache/debconf && \
        # Delete index of available files from apt-get update
        # Use this if not running --mount=type=cache.
        # rm -rf /var/lib/apt/lists/*
        # Clear logs of installed packages
        truncate -s 0 /var/log/apt/* && \
        truncate -s 0 /var/log/dpkg.log

    # If LANG=C.UTF-8 is not enough, build full featured locale
    # RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
    # ENV LANG en_US.utf8

    # Install AWS CLI v2 from binary package
    # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    # https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
    # RUN set -ex && \
    #     curl -sSfL "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m)-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && \
    #     unzip -q awscliv2.zip && \
    #     ./aws/install && \
    #     rm -rf ./aws && \
    #     rm awscliv2.zip
    # SAVE ARTIFACT /usr/local/aws-cli /aws-cli

    RUN mkdir -p /busybox && cp /bin/busybox /busybox/sh
    SAVE ARTIFACT /busybox /busybox

    SAVE ARTIFACT /usr/lib/locale/C.UTF-8

    SAVE ARTIFACT /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6 /libs/
    SAVE ARTIFACT /lib/${LINUX_ARCH}-linux-gnu/libgcc_s.so.1 /libs/
    # SAVE ARTIFACT /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6 /libs/libstdcpp.so.6
    SAVE ARTIFACT /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28 /libs/libstdcpp.so.6.0.28

    SAVE IMAGE --cache-hint


# Create base image for prod with everything but the code release
prod-base:
    FROM ${PROD_BASE_IMAGE_NAME}:${PROD_BASE_IMAGE_TAG}

    ENV LANG=$LANG

    # These environment vars are set by default
    # SHLVL=1
    # SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
    # PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/busybox

    # This is necessary for RUN commands to work
    COPY +deploy-install/busybox/sh /bin/
    # RUN /bin/sh --install -s /bin
    # RUN set -ex && mkdir -p /bin /sbin /usr/bin /usr/sbin && /bin/sh --install -s
    # RUN set -ex && mkdir -p /bin /sbin /usr/bin /usr/sbin && /busybox/busybox --install -s

    # This doesn't work because Earthly insists on stat'ing /bin/sh before
    # running commands, even when we are specifying a shell
    # RUN ["/busybox/sh", "-c", "\"ln -s /busybox/busybox /bin/sh\""]
    # base+deploy-base *failed* | --> RUN /busybox/sh -c "ln -s /busybox/busybox /bin/sh"
    # base+deploy-base *failed* | container_linux.go:380: starting container process caused: exec: "/bin/sh": stat /bin/sh: no such file or directory

    COPY +deploy-install/C.UTF-8 /usr/lib/locale/C.UTF-8

    # Add shared libraries needed at runtime
    # COPY --from=prod-install "/lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6.2" "/lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6"
    # # RUN ln -s "/lib/$(uname -m)-linux-gnu/libtinfo.so.6.2" "/lib/$(uname -m)-linux-gnu/libtinfo.so.6"

    # COPY --from=prod-install "/lib/${LINUX_ARCH}-linux-gnu/libgcc_s.so.1" "/lib/${LINUX_ARCH}-linux-gnu/"

    # COPY --from=prod-install "/lib/${LINUX_ARCH}-linux-gnu/libncursesw.so.6.2" "/lib/${LINUX_ARCH}-linux-gnu/libncurses2.so.6"
    # # RUN ln -s "/lib/$(uname -m)-linux-gnu/libncursesw.so.6.2" "/lib/$(uname -m)-linux-gnu/libncursesw.so.6"

    # COPY --from=prod-install "/usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28" "/usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6"
    # # RUN ln -s "/usr/lib/$(uname -m)-linux-gnu/libstdc++.so.6.0.28" "/usr/lib/$(uname -m)-linux-gnu/libstdc++.so.6"

    COPY +deploy-install/libs/libtinfo.so.6 /lib/${LINUX_ARCH}-linux-gnu/
    # RUN ln -s /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6.2 /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6

    COPY +deploy-install/libs/libgcc_s.so.1 /lib/${LINUX_ARCH}-linux-gnu/
    # COPY +deploy-install/libs/libstdcpp.so.6 /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6
    COPY +deploy-install/libs/libstdcpp.so.6.0.28 /lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28
    RUN ln -s /lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28 /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6

    # RUN ls -l /usr/lib/${LINUX_ARCH}-linux-gnu/*
    # RUN ls -l /lib/${LINUX_ARCH}-linux-gnu/*

    # COPY +deploy-install/aws-cli /usr/local/aws-cli

    SAVE IMAGE --cache-hint
