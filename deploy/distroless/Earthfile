# Deploy using distroless image
# https://github.com/GoogleContainerTools/distroless
VERSION --shell-out-anywhere --use-copy-include-patterns --referenced-save-only 0.6

# App versions
ARG ELIXIR_VERSION=1.13.3
# ARG OTP_VERSION=23.3.4
ARG OTP_VERSION=24.2
ARG NODE_VERSION=16.14.1
# ARG NODE_VERSION=lts

ARG AWS_CLI_VERSION=2.0.61

# ARG ELIXIR_DEBIAN_VERSION=buster-20210208
ARG ELIXIR_DEBIAN_VERSION=bullseye-20210902-slim

# ARG DEBIAN_VERSION=buster-slim
ARG DEBIAN_VERSION=bullseye-slim

# Docker registries for base images. If blank, will use docker.io.
# If specified, should have a trailing slash.
# REGISTRY is a private registry, e.g. 123.dkr.ecr.ap-northeast-1.amazonaws.com/
# PUBLIC_REGISTRY is for public base images, e.g. debian or alpine
# Public images may be mirrored into the private registry, e.g. with skopeo
ARG REGISTRY=""
ARG PUBLIC_REGISTRY=$REGISTRY

ARG BUILD_IMAGE_NAME=${PUBLIC_REGISTRY}hexpm/elixir
ARG BUILD_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}


# Deploy base image
# https://github.com/GoogleContainerTools/distroless/blob/main/base/README.md
ARG DEPLOY_IMAGE_NAME=gcr.io/distroless/base-debian11
# ARG DEPLOY_IMAGE_TAG=debug-nonroot
# ARG DEPLOY_IMAGE_TAG=latest
# debug includes busybox
ARG DEPLOY_IMAGE_TAG=debug

ARG INSTALL_IMAGE_NAME=${PUBLIC_REGISTRY}debian
ARG INSTALL_IMAGE_TAG=bullseye-slim

ARG LANG=C.UTF-8

# Make apt-get be quiet
# ARG DEBIAN_FRONTEND=noninteractive
# ARG APT_OPTS="-y -qq -o=Dpkg::Use-Pty=0 --no-install-recommends"
# ARG APT_OPTS_UPDATE="-qq"

# Set arch in Linux naming convention
ARG TARGETARCH
# TODO: see if we can get this from `uname -m`
FROM ${PUBLIC_REGISTRY}busybox
ARG LINUX_ARCH=$(uname -m)

# Create build base image with OS dependencies
build-os-deps:
    FROM ${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}

    # Configure apt caching for use with BuildKit
    # The default Debian Docker image has special config to clear caches.
    # If we are using --mount=type=cache, then we want it.
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        # Avoid warnings on older versions of Debian/Ubuntu
        # apt-get -y install $APT_OPTS dialog apt-utils && \
        # Enable installation of packages over https
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            gnupg-agent \
            # software-properties-common \
            build-essential \
            git \
            lsb-release \
            $BUILD_EXTRA && \

        # Install node using n
        curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && \
        chmod +x /usr/local/bin/n && \
        # Install lts version
        # n lts && \
        # Install specific version
        n "$NODE_VERSION" && \
        rm /usr/local/bin/n

        # Install latest Postgres
        # curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc && \
        # echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
        # echo "Package: *\nPin: release o=apt.postgresql.org\nPin-Priority: 500\n" | tee /etc/apt/preferences.d/pgdg.pref && \
        # apt-get update -qq && \
        # apt-get -y install $APT_OPTS \
        #     libpq-dev \
        #     postgresql-client &&

        # Install Microsoft ODBC Driver for SQL Server
        # curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc && \
        # curl -s https://packages.microsoft.com/config/debian/11/prod.list -o /etc/apt/sources.list.d/mssql-release.list && \
        # export ACCEPT_EULA=Y && \
        # apt-get -qq update -qq && apt-get -y install $APT_OPTS msodbcsql17 && \
        # rm -rf /var/lib/dpkg &&

        # apt-get clean &&
        # apt-get remove curl \
        # apt-get clean && \
        # apt-get autoremove -y && \
        # apt-get purge -y --auto-remove && \
        # info on installed packages
        # rm -rf /var/lib/dpkg && \
        # rm -rf /var/cache/debconf && \
        # Logs for installed packages
        rm -rf /var/log/apt/* && \
        rm -rf /var/log/dpkg.log
        # apt-get update files
        # rm -rf /var/lib/apt/lists/*

    SAVE IMAGE --cache-hint

# Staging image for binaries which are copied into final deploy image
deploy-install:
    FROM ${INSTALL_IMAGE_NAME}:${INSTALL_IMAGE_TAG}

    # Configure apt caching for use with BuildKit
    RUN set -exu && \
        rm -f /etc/apt/apt.conf.d/docker-clean && \
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
        echo 'Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/99use-gzip-compression

    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \
        set -exu && \
        apt-get update -qq && \
        # Avoid warnings
        # apt-get -y install $APT_OPTS dialog apt-utils \
        DEBIAN_FRONTEND=noninteractive \
        apt-get -y install -y -qq --no-install-recommends \
            # apt-transport-https \
            ca-certificates \
            curl \
            # gnupg-agent \
            # software-properties-common \
            # gnupg \
            unzip \
            busybox-static \
            locales \
            # Needed by Erlang VM
            libtinfo6 \
            $INSTALL_EXTRA && \

        locale-gen && \

        # apt-get clean && \
        # apt-get autoremove -y && \
        # apt-get purge -y --auto-remove && \
        # info on installed packages
        # rm -rf /var/lib/dpkg && \
        # rm -rf /var/cache/debconf && \
        # Logs for installed packages
        rm -rf /var/log/apt/* && \
        rm -rf /var/log/dpkg.log
        # apt-get update files
        # rm -rf /var/lib/apt/lists/*

    # Install AWS CLI v2 from binary package
    # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    # https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
    # RUN set -ex && \
    #     curl -sSfL "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m)-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" && \
    #     unzip -q awscliv2.zip && \
    #     ./aws/install && \
    #     rm -rf ./aws && \
    #     rm awscliv2.zip
    # SAVE ARTIFACT /usr/local/aws-cli /aws-cli

    RUN mkdir -p /busybox && cp /bin/busybox /busybox/sh
    SAVE ARTIFACT /busybox /busybox

    SAVE ARTIFACT /usr/lib/locale/C.UTF-8

    SAVE ARTIFACT /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6 /libs/
    SAVE ARTIFACT /lib/${LINUX_ARCH}-linux-gnu/libgcc_s.so.1 /libs/
    # SAVE ARTIFACT /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6 /libs/libstdcpp.so.6
    SAVE ARTIFACT /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28 /libs/libstdcpp.so.6.0.28

    RUN ls -l /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc*

    # ldd _build/${MIX_ENV}/rel/${RELEASE}/erts-12.3/bin/beam.smp
    #   linux-vdso.so.1 (0x00007ffd5c302000)
    #   libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8cbf3f2000)
    #   libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f8cbf3c3000)
    #   libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f8cbf3a1000)
    #   librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f8cbf396000)
    #   libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f8cbf1c9000)
    #   libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f8cbf085000)
    #   libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f8cbf069000)
    #   libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8cbeea4000)
    #   /lib64/ld-linux-x86-64.so.2 (0x00007f8cbf88a000)

    SAVE IMAGE --cache-hint

deploy-base:
    FROM ${DEPLOY_IMAGE_NAME}:${DEPLOY_IMAGE_TAG}

    # Default env vars
    # SHLVL=1
    # SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
    # PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/busybox

    # This is necessary for RUN commands to work
    COPY +deploy-install/busybox/sh /bin/
    # RUN /bin/sh --install -s /bin
    # RUN set -ex && mkdir -p /bin /sbin /usr/bin /usr/sbin && /bin/sh --install -s
    # RUN set -ex && mkdir -p /bin /sbin /usr/bin /usr/sbin && /busybox/busybox --install -s

    # This doesn't work because Earthly insists on stat'ing /bin/sh before
    # running commands, even when we are specifying a shell
    # RUN ["/busybox/sh", "-c", "\"ln -s /busybox/busybox /bin/sh\""]
    # base+deploy-base *failed* | --> RUN /busybox/sh -c "ln -s /busybox/busybox /bin/sh"
    # base+deploy-base *failed* | container_linux.go:380: starting container process caused: exec: "/bin/sh": stat /bin/sh: no such file or directory

    COPY +deploy-install/C.UTF-8 /usr/lib/locale/C.UTF-8

    ENV LANG=$LANG

    COPY +deploy-install/libs/libtinfo.so.6 /lib/${LINUX_ARCH}-linux-gnu/
    # RUN ln -s /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6.2 /lib/${LINUX_ARCH}-linux-gnu/libtinfo.so.6

    COPY +deploy-install/libs/libgcc_s.so.1 /lib/${LINUX_ARCH}-linux-gnu/
    # COPY +deploy-install/libs/libstdcpp.so.6 /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6
    COPY +deploy-install/libs/libstdcpp.so.6.0.28 /lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28
    RUN ln -s /lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6.0.28 /usr/lib/${LINUX_ARCH}-linux-gnu/libstdc++.so.6

    # RUN ls -l /usr/lib/${LINUX_ARCH}-linux-gnu/*
    # RUN ls -l /lib/${LINUX_ARCH}-linux-gnu/*

    # COPY +deploy-install/aws-cli /usr/local/aws-cli

    SAVE IMAGE --cache-hint
