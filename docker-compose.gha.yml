---
version: "3.9"
services:
  # Image used to run tests
  test:
    image: "${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:test${GITHUB_SHA}"
    build:
      dockerfile: deploy/debian.Dockerfile
      target: test-image
      args:
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
      context: .
      # secrets:
      #   - oban_license_key
      #   - oban_key_fingerprint
      #   - access_token
    environment:
      - DATABASE_DB
      - DATABASE_HOST=postgres
      - DB_HOST=postgres
      - SECRET_KEY_BASE
    volumes:
      - "./junit-reports:/app/_build/test/junit-reports"
      - "./sarif-reports:/sarif-reports"
      - "./.cache:/var/cache"
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # Final deploy service
  deploy:
    image: "${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:${IMAGE_TAG:-latest}"
    build:
      dockerfile: deploy/debian.Dockerfile
      target: deploy
      args:
        MIX_ENV: prod
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
      # secrets:
      #   - oban_license_key
      #   - oban_key_fingerprint
      #   - access_token
      context: .
    environment:
      - DATABASE_URL=ecto://postgres:postgres@postgres:5432/app_prod
      - PORT=4001
      - SECRET_KEY_BASE='0cSFk8v5IsZIIGCjY+X66l5xULUl/2mczI4Eqf7slpyns5nBkhegDn6YH9th+5D2'
    ports:
      - '4001:4001'
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://127.0.0.1:4001/healthz"]
    #   start_period: 2s
    #   interval: 1s
    #   timeout: 1s
    #   retries: 20
    healthcheck:
      test: ["CMD", "bin/prod", "eval", "PhoenixContainerExample.Health.liveness()"]
      start_period: 2s
      interval: 2s
      timeout: 1s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy

  # Deploy image plus security scan tools
  scan:
    image: "${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:scan${GITHUB_SHA}"
    build:
      dockerfile: deploy/debian.Dockerfile
      target: deploy-scan
      args:
        MIX_ENV: prod
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
      context: .
    volumes:
      - "./sarif-reports:/sarif-reports"
      - "./.cache:/var/cache"

  # https://github.com/docker-library/docs/blob/master/postgres/README.md
  # https://geshan.com.np/blog/2021/12/docker-postgres/
  postgres:
    image: "${PUBLIC_REGISTRY:-docker.io/}postgres:14.6-alpine"
    ports:
      - '5432'
    user: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data_path:/var/lib/postgresql/data
      # - ./db/postgres/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    restart: always
    healthcheck:
      # test: ["CMD", "pg_isready -U postgres -d app_test"]
      # test: ["psql", "-w", "-U", "postgres", "-d", "app_test", "-c", "SELECT 1"]
      test: ["CMD", "pg_isready"]
      start_period: 2s
      interval: 1s
      timeout: 1s
      retries: 10

  # mysql:
  #   # https://hub.docker.com/_/mysql
  #   image: "${PUBLIC_REGISTRY:-docker.io/}mysql:8"
  #   environment:
  #     - MYSQL_ALLOW_EMPTY_PASSWORD=yes
  #     - MYSQL_DATABASE=test
  #     - MYSQL_ROOT_PASSWORD=
  #   # command: --default-authentication-plugin=mysql_native_password
  #   ports:
  #     - '3306'
  #   volumes:
  #     - mysql_data_path:/var/lib/mysql
  #   # - "./db/mysql/initdb.d:/docker-entrypoint-initdb.d"
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-h", "127.0.0.1"]
  #     # test: ["CMD", "mysql" ,"-h", "mysql", "-P", "3306", "-u", "root", "-e", "SELECT 1", "cache"]
  #     start_period: 1s
  #     interval: 1s
  #     timeout: 1s
  #     retries: 10

  # mssql:
  #   image: mcr.microsoft.com/mssql/server:2019-latest
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: some!Password
  #   ports:
  #     - '1433'

  redis:
    image: "${PUBLIC_REGISTRY:-docker.io/}redis:4"
    ports:
      - '6379'
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 10

  newman:
    image: "${PUBLIC_REGISTRY:-docker.io/}postman/newman"
    image: "${REGISTRY:-docker.io/}${IMAGE_OWNER}/newman"
    build:
      dockerfile: newman.Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
      context: .
    volumes:
      - "./postman:/etc/newman"
      - "./junit-reports:/junit-reports"

  trivy:
    # image: "${PUBLIC_REGISTRY:-docker.io/}aquasec/trivy"
    image: ghcr.io/aquasecurity/trivy
    volumes:
      - "./.cache:/root/.cache"
      - "/var/run/docker.sock:/var/run/docker.sock"

  # https://docs.datadoghq.com/getting_started/agent/
  # https://github.com/DataDog/datadog-agent/blob/main/pkg/config/config_template.yaml
  datadog:
    # image: "${PUBLIC_REGISTRY:-docker.io/}datadog/agent:7"
    # image: public.ecr.aws/datadog/agent:7
    # image: gcr.io/datadoghq/agent:7
    image: gcr.io/datadoghq/agent:latest
    # volumes:
    #   # Main Datadog config
    #   - ./datadog.yml:/etc/datadog-agent/datadog.yaml
    #   # Log config for service for app
    #   - ./datadog-conf.yml:/etc/datadog-agent/conf.d/app.d/conf.yml
    ports:
      - "4317:4317"       # OTLP over gRPC
      - "4318:4318"       # OTLP over HTTP
      - "8125:8125/udp"   # Datadog DogStatsD metrics receiver
      - "8126:8126"       # Datadog trace receiver
      - "5002:5002"       # web ui
      - "10518:10518"     # Datadog log receiver
    # healthcheck:
    #   test: ["CMD", "/probe.sh"]
    #   start_period: 1s
    #   interval: 2s
    #   timeout: 5s
    #   retries: 20
    environment:
      - DD_API_KEY
      - DD_SITE
      # - DD_HOSTNAME=dev-box
      - DD_HOSTNAME="none"
      - DD_TAGS=environment:development
      - DD_ENV=development
      - DD_INSIDE_CI="true"
      - DD_CHECKS_TAG_CARDINALITY=high
      - DD_CLOUD_PROVIDER_METADATA=aws
      - DD_GUI_PORT=5002
        # Agent log_level
      - DD_LOG_LEVEL
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_TAG_CARDINALITY=high
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    restart: always

volumes:
  postgres_data_path:
    driver: local
  # mysql_data_path:
  #   driver: local

# secrets:
#   oban_license_key:
#     file: ./.dev_secrets/oban_license_key.txt
#   oban_key_fingerprint:
#     file: ./.dev_secrets/oban_fingerprint.txt
#   access_token:
#     file: ./.access_token
