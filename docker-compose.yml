---
version: "3.9"
services:
  deploy:
    image: ${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:${IMAGE_TAG:-latest}
    build:
      dockerfile: deploy/debian.Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
        MIX_ENV: prod
        REGISTRY: ${REGISTRY:-docker.io/}
        # PUBLIC_REGISTRY: ${PUBLIC_REGISTRY}
      target: deploy
      context: .
    environment:
      - PORT=4000
      - SECRET_KEY_BASE
      - DATABASE_URL
      - DATABASE_HOST=postgres
      - DATABASE_DB
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - AWS_DEFAULT_REGION
    stdin_open: true
    tty: true
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy

  test:
    image: ${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:test
    build:
      dockerfile: deploy/debian.Dockerfile
      target: test-image
      args:
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
        # PUBLIC_REGISTRY: ${PUBLIC_REGISTRY}
      context: .
    environment:
      - MIX_ENV=test
      - DATABASE_URL
      - DATABASE_HOST=postgres
      - DATABASE_DB
      - SECRET_KEY_BASE
    # stdin_open: true
    # tty: true
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - "./junit-reports:/app/_build/test/junit-reports"
      - "./sarif-reports:/sarif-reports"
      - "./trivy-cache:/trivy-cache"

  dev:
    image: ${REGISTRY:-docker.io/}${IMAGE_OWNER}/${IMAGE_NAME}:dev
    build:
      context: .
      dockerfile: deploy/debian.Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
        MIX_ENV: dev
        REGISTRY: ${REGISTRY:-docker.io/}
      target: dev
    # command: /bin/bash -c /app/bin/app-start-dev
    # command: /app/bin/app-start-dev
    # command: /bin/sh -c "/app/_build/prod/rel/app/bin/app foreground"

    # VSCode devcontainer needs something running
    # command: ["tail", "-f", "/dev/null"]
    command: ["sleep", "infinity"]
    # command: /bin/sh -c "while sleep 1000; do :; done"
    # command: mix phx.server
    depends_on:
      - postgres
    environment:
      - MIX_ENV=dev
      - SECRET_KEY_BASE
      - DATABASE_URL
      - DATABASE_HOST=postgres
      - DATABASE_DB
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - AWS_DEFAULT_REGION
    ports:
      - "4000:4000"
    stdin_open: true
    tty: true
    cap_add:
      - CAP_SYS_ADMIN
    volumes:
      - ".:/app:delegated"
      # - 'nfsmount:/app'

  codebuild:
    image: "${REGISTRY:-docker.io/}foo-app-ecs-build:latest"
    # Custom build image for AWS CodeBuild
    # build:
    #   context: .
    #   dockerfile: deploy/codebuild.Dockerfile
    #   args:
    #     BUILDKIT_INLINE_CACHE: "1"
    #     REGISTRY: ${REGISTRY:-docker.io/}
    environment:
      - REPO_URL
      - TASKDEF=ecs/taskdef-otel.json
      # - EARTHLY_BUILDKIT_CACHE_SIZE_MB=30000
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
      - DOCKERHUB_USERNAME
      - DOCKERHUB_TOKEN
    read_only: false
    privileged: true
    volumes:
      - ".:/app:delegated"

  # https://github.com/docker-library/docs/blob/master/postgres/README.md
  # https://geshan.com.np/blog/2021/12/docker-postgres/
  postgres:
    image: "${PUBLIC_REGISTRY:-docker.io/}postgres:14-alpine"
    # build:
    #   context: .
    #   dockerfile: deploy/postgres.Dockerfile
    #   args:
    #     REGISTRY: ${REGISTRY:-docker.io/}
    restart: always
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data_path:/var/lib/postgresql/data
      # - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -U postgres -d app_test"]
      test: ["CMD-SHELL", "pg_isready"]
      start_period: 5s
      interval: 2s
      timeout: 5s
      retries: 20

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: some!Password
    ports:
      - "1433:1433"

  mysql:
    image: "${PUBLIC_REGISTRY:-docker.io/}mysql:8"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      # MYSQL_ROOT_PASSWORD: example
    # command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"

  deploy-scan:
    build:
      context: .
      dockerfile: deploy/debian.Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
        REGISTRY: ${REGISTRY:-docker.io/}
      target: deploy-scan
    image: deploy-scan

volumes:
  postgres_data_path:
    driver: local

# volumes:
#   nfsmount:
#     driver: local
#     driver_opts:
#       type: nfs
#       o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
#       device: ":${PWD}"
