---
# Build app in Docker and push to repo
#
# https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-cd-pipeline.html
# Environment vars:
#   REPO_URL: ECS app repository
#   CACHE_REPO_URL: ECS repository for caching
#   CONTAINER_NAME: container name in service task definition
# https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
#   AWS_DEFAULT_REGION
#   CODEBUILD_RESOLVED_SOURCE_VERSION
# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
version: 0.2
env:
  variables:
    # Disable color in earthly
    NO_COLOR: 1
    # Enable new docker features
    DOCKER_BUILDKIT: 1
    DOCKER_CLI_EXPERIMENTAL: enabled
    COMPOSE_DOCKER_CLI_BUILD: 1
    # TASKDEF=ecs/taskdef.json
    TASKDEF: ecs/taskdef-otel.json
  parameter-store:
    DOCKERHUB_USERNAME: /cogini/foo/dev/creds/dockerhub_username
    DOCKERHUB_TOKEN: /cogini/foo/dev/creds/dockerhub_token
phases:
  install:
    commands:
      - /usr/sbin/service docker start

      - export REGISTRY_NAME="$(dirname $REPO_URL)"
      - export REGISTRY="${REGISTRY_NAME}/"

      - export DOCKERHUB_AUTH="$(echo "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" | base64)"
      - mkdir -p /root/.docker
        # - echo '{"credsStore":"ecr-login"}' | tee /root/.docker/config.json
      - sed -i -e "s!<REGISTRY_NAME>!${REGISTRY_NAME}!g" -e "s!<DOCKERHUB_AUTH>!${DOCKERHUB_AUTH}!g" ecs/docker-config.json | tee /root/.docker/config.json
      # - cat /root/.docker/config.json

      # Log into docker to avoid rate limits
      - echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

      # https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectEnvironment.html
      # - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
      # - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      # https://github.com/awslabs/amazon-ecr-credential-helper
#      - PYTHON=python2 amazon-linux-extras enable docker
      # - yum clean metadata
#      - yum -y install amazon-ecr-credential-helper
      # - wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly
      # - wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-arm64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly
#      - curl -sL https://github.com/earthly/earthly/releases/latest/download/earthly-linux-arm64 -o /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly && /usr/local/bin/earthly bootstrap
      # - curl -sL https://github.com/earthly/earthly/releases/latest/download/earthly-linux-arm64 -o /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly && /usr/local/bin/earthly bootstrap --no-buildkit
      - earthly bootstrap
      - earthly --version
      - docker --version
      - uname -s

  pre_build:
    commands:
      # Log into Amazon ECR
      # Use new aws cli for login
      # - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$REGISTRY"
      # Use old aws cli for login
      # - $(aws ecr get-login --region "$AWS_DEFAULT_REGION" --no-include-email)
      # Use amazon-ecr-credential-helper for login

      # - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - COMMIT_HASH=$CODEBUILD_RESOLVED_SOURCE_VERSION
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      # Scan app source for vulnerabilities
      # - trivy filesystem --exit-code 0 --severity HIGH --no-progress .
      # - trivy filesystem --exit-code 1 --severity CRITICAL --no-progress .
      # - grype -vv --fail-on medium .
      # - grype -vv .

      # Build and run tests
      # - earthly -V --build-arg REGISTRY --build-arg REPO_URL --build-arg IMAGE_TAG +test
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --build-arg IMAGE_TAG --ci --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --build-arg IMAGE_TAG --ci --remote-cache=$REPO_URL:cache --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --build-arg IMAGE_TAG --push +all
      # - earthly -P -V +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --use-inline-cache --save-inline-cache --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --no-cache --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --platform=linux/arm64 --no-cache --push +all
      # - earthly -P -V --build-arg REGISTRY --no-cache +all
      # - earthly -P -V --build-arg REGISTRY +all
      - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --push +all
      # - earthly -P -V --build-arg REGISTRY --build-arg REPO_URL --ci --push +all

      # Tag image separately from the build, as the varying IMAGE_TAG screws with caching.
      # - docker tag foo-app:latest ${REPO_URL}:${IMAGE_TAG}
      - docker tag ${REPO_URL}:latest ${REPO_URL}:${IMAGE_TAG}
      - docker push ${REPO_URL}:${IMAGE_TAG}

      # Write image definition files
      # https://docs.aws.amazon.com/codepipeline/latest/userguide/file-reference.html
      # Generate imagedefinitions.json file for standard ECS deploy action
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPO_URL:$IMAGE_TAG" | tee imagedefinitions.json
      # Generate imageDetail.json file for CodeDeploy ECS blue/green deploy action
      - printf '{"ImageURI":"%s"}' "$REPO_URL:$IMAGE_TAG" | tee imageDetail.json

      # Generate files based on env vars passed from Terraform
      # https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-resources.html
      - sed -i -e "s!<NAME>!${CONTAINER_NAME}!g" -e "s!<PORT>!${PORT}!g" ecs/appspec.yml
      - sed -i -e "s!<NAME>!${CONTAINER_NAME}!g" -e "s!<PORT>!${PORT}!g" $TASKDEF
      - sed -i -e "s!<TASK_ROLE_ARN>!${TASK_ROLE_ARN}!g" $TASKDEF
      - sed -i -e "s!<EXECUTION_ROLE_ARN>!${EXECUTION_ROLE_ARN}!g" $TASKDEF
      - sed -i -e "s!<CPU>!${CPU}!g" -e "s!<MEMORY>!${MEMORY}!g" $TASKDEF

      # - sed -i -e "s!<CPU_ARCH>!X86_64!g" $TASKDEF
      - sed -i -e "s!<CPU_ARCH>!ARM64!g" $TASKDEF

      - sed -i -e "s!<AWSLOGS_GROUP>!${AWSLOGS_GROUP}!g" $TASKDEF
      - sed -i -e "s!<AWSLOGS_REGION>!${AWS_REGION}!g" $TASKDEF
      - sed -i -e "s!<AWSLOGS_STREAM_PREFIX>!${AWSLOGS_STREAM_PREFIX}!g" $TASKDEF

      - sed -i -e "s!<CONFIG_S3_BUCKET>!${CONFIG_S3_BUCKET}!g" -e "s!<CONFIG_S3_PREFIX>!${CONFIG_S3_PREFIX}!g" $TASKDEF
      - sed -i "s!<AWS_REGION>!${AWS_REGION}!g" $TASKDEF
      - sed -i "s!<AWS_ACCOUNT_ID>!${AWS_ACCOUNT_ID}!g" $TASKDEF

      - cat ecs/appspec.yml
      - cat $TASKDEF
      - cp ecs/appspec.yml .
      - cp $TASKDEF taskdef.json
  # post_build:
  #   commands:
artifacts:
  files:
    - imagedefinitions.json
    - imageDetail.json
    - appspec.yml
    - taskdef.json
cache:
  paths:
    # - '/var/lib/docker/**/*'
    # - '/root/.cache/docker/**/*'
    # - '/root/.cache/trivy/**/*'
    # - '/root/.cache/grype/**/*'
