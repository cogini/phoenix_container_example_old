---
# Build app in Docker and push to repo
#
# https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-cd-pipeline.html
# Environment vars:
#   REPO_URI: ECS app repository URI
#   CACHE_REPO_URI: ECS repository URI for caching
#   CONTAINER_NAME: container name in service task definition
# https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
#   AWS_DEFAULT_REGION
#   CODEBUILD_RESOLVED_SOURCE_VERSION
# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
version: 0.2
env:
  variables:
    TEMPLATE_DIR: ecs
    # Enable docker buildx
    DOCKER_CLI_EXPERIMENTAL: enabled
    COMPOSE_DOCKER_CLI_BUILD: 1
phases:
  install:
    commands:
      - /usr/sbin/service docker start
  pre_build:
    commands:
      - aws --version
      - docker --version
      - docker-compose --version

      # Use amazon-ecr-credential-helper for login
      - mkdir -p /root/.docker
      - echo '{"credsStore":"ecr-login"}' | tee /root/.docker/config.json

      # - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      # - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_URI

      # - docker pull elixir:1.10.4-alpine
      # - docker pull node:14.4-stretch
      # - docker pull alpine:3.12
      # - docker pull postgres:12

      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo "Starting build phase"
      # Create builder instance
      - docker buildx create --name mybuilder --use

      # Build test container
      - $TEMPLATE_DIR/build-test.sh
      # Build test db container
      - $TEMPLATE_DIR/build-db.sh
      # Run tests
      - docker-compose run test mix test
      # Build final deploy container
      - $TEMPLATE_DIR/build.sh
  post_build:
    commands:
      - echo "Writing image definition files..."
      # https://docs.aws.amazon.com/codepipeline/latest/userguide/file-reference.html
      # Generate imagedefinitions.json file for standard ECS deploy action
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPO_URI:$IMAGE_TAG" | tee imagedefinitions.json
      # Generate imageDetail.json file for CodeDeploy ECS blue/green deploy action
      - printf '{"ImageURI":"%s"}' "$REPO_URI:$IMAGE_TAG" | tee imageDetail.json

      - sed -i 's!<NAME>!'$CONTAINER_NAME'!g' $TEMPLATE_DIR/appspec.yml $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<PORT>!'$PORT'!g' ecs/appspec.yml $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<TASK_ROLE_ARN>!'$TASK_ROLE_ARN'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<EXECUTION_ROLE_ARN>!'$EXECUTION_ROLE_ARN'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<CPU>!'$CPU'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<MEMORY>!'$MEMORY'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<AWSLOGS_GROUP>!'$AWSLOGS_GROUP'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<AWSLOGS_REGION>!'$AWS_REGION'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<AWSLOGS_STREAM_PREFIX>!'$AWSLOGS_STREAM_PREFIX'!g' $TEMPLATE_DIR/taskdef.json

      - sed -i 's!<CONFIG_S3_BUCKET>!'$CONFIG_S3_BUCKET'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<CONFIG_S3_PREFIX>!'$CONFIG_S3_PREFIX'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<AWS_REGION>!'$AWS_REGION'!g' $TEMPLATE_DIR/taskdef.json
      - sed -i 's!<AWS_ACCOUNT_ID>!'$AWS_ACCOUNT_ID'!g' $TEMPLATE_DIR/taskdef.json

      - cat $TEMPLATE_DIR/appspec.yml
      - cat $TEMPLATE_DIR/taskdef.json
      - cp $TEMPLATE_DIR/appspec.yml .
      - cp $TEMPLATE_DIR/taskdef.json .

      - echo Build completed on `date`
artifacts:
  files:
    - imagedefinitions.json
    - imageDetail.json
    - appspec.yml
    - taskdef.json
cache:
  paths:
    - '/root/.cache/docker/**/*'
